{"ast":null,"code":"'use strict';\n\nvar isPlainObject = require('is-plain-obj');\n\n/**\n * Map of all Contentful block types. Blocks contain inline or block nodes.\n */\nexports.BLOCKS = void 0;\n(function (BLOCKS) {\n  BLOCKS[\"DOCUMENT\"] = \"document\";\n  BLOCKS[\"PARAGRAPH\"] = \"paragraph\";\n  BLOCKS[\"HEADING_1\"] = \"heading-1\";\n  BLOCKS[\"HEADING_2\"] = \"heading-2\";\n  BLOCKS[\"HEADING_3\"] = \"heading-3\";\n  BLOCKS[\"HEADING_4\"] = \"heading-4\";\n  BLOCKS[\"HEADING_5\"] = \"heading-5\";\n  BLOCKS[\"HEADING_6\"] = \"heading-6\";\n  BLOCKS[\"OL_LIST\"] = \"ordered-list\";\n  BLOCKS[\"UL_LIST\"] = \"unordered-list\";\n  BLOCKS[\"LIST_ITEM\"] = \"list-item\";\n  BLOCKS[\"HR\"] = \"hr\";\n  BLOCKS[\"QUOTE\"] = \"blockquote\";\n  BLOCKS[\"EMBEDDED_ENTRY\"] = \"embedded-entry-block\";\n  BLOCKS[\"EMBEDDED_ASSET\"] = \"embedded-asset-block\";\n  BLOCKS[\"EMBEDDED_RESOURCE\"] = \"embedded-resource-block\";\n  BLOCKS[\"TABLE\"] = \"table\";\n  BLOCKS[\"TABLE_ROW\"] = \"table-row\";\n  BLOCKS[\"TABLE_CELL\"] = \"table-cell\";\n  BLOCKS[\"TABLE_HEADER_CELL\"] = \"table-header-cell\";\n})(exports.BLOCKS || (exports.BLOCKS = {}));\n\n/**\n * Map of all Contentful inline types. Inline contain inline or text nodes.\n *\n * @note This should be kept in alphabetical order since the\n * [validation package](https://github.com/contentful/content-stack/tree/master/packages/validation)\n *  relies on the values being in a predictable order.\n */\nexports.INLINES = void 0;\n(function (INLINES) {\n  INLINES[\"ASSET_HYPERLINK\"] = \"asset-hyperlink\";\n  INLINES[\"EMBEDDED_ENTRY\"] = \"embedded-entry-inline\";\n  INLINES[\"EMBEDDED_RESOURCE\"] = \"embedded-resource-inline\";\n  INLINES[\"ENTRY_HYPERLINK\"] = \"entry-hyperlink\";\n  INLINES[\"HYPERLINK\"] = \"hyperlink\";\n  INLINES[\"RESOURCE_HYPERLINK\"] = \"resource-hyperlink\";\n})(exports.INLINES || (exports.INLINES = {}));\n\n/**\n * Map of all Contentful marks.\n */\nexports.MARKS = void 0;\n(function (MARKS) {\n  MARKS[\"BOLD\"] = \"bold\";\n  MARKS[\"ITALIC\"] = \"italic\";\n  MARKS[\"UNDERLINE\"] = \"underline\";\n  MARKS[\"CODE\"] = \"code\";\n  MARKS[\"SUPERSCRIPT\"] = \"superscript\";\n  MARKS[\"SUBSCRIPT\"] = \"subscript\";\n  MARKS[\"STRIKETHROUGH\"] = \"strikethrough\";\n})(exports.MARKS || (exports.MARKS = {}));\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nvar _a$1;\n/**\n * Array of all top level block types.\n * Only these block types can be the direct children of the document.\n */\nvar TOP_LEVEL_BLOCKS = [exports.BLOCKS.PARAGRAPH, exports.BLOCKS.HEADING_1, exports.BLOCKS.HEADING_2, exports.BLOCKS.HEADING_3, exports.BLOCKS.HEADING_4, exports.BLOCKS.HEADING_5, exports.BLOCKS.HEADING_6, exports.BLOCKS.OL_LIST, exports.BLOCKS.UL_LIST, exports.BLOCKS.HR, exports.BLOCKS.QUOTE, exports.BLOCKS.EMBEDDED_ENTRY, exports.BLOCKS.EMBEDDED_ASSET, exports.BLOCKS.EMBEDDED_RESOURCE, exports.BLOCKS.TABLE];\n/**\n * Array of all allowed block types inside list items\n */\nvar LIST_ITEM_BLOCKS = [exports.BLOCKS.PARAGRAPH, exports.BLOCKS.HEADING_1, exports.BLOCKS.HEADING_2, exports.BLOCKS.HEADING_3, exports.BLOCKS.HEADING_4, exports.BLOCKS.HEADING_5, exports.BLOCKS.HEADING_6, exports.BLOCKS.OL_LIST, exports.BLOCKS.UL_LIST, exports.BLOCKS.HR, exports.BLOCKS.QUOTE, exports.BLOCKS.EMBEDDED_ENTRY, exports.BLOCKS.EMBEDDED_ASSET, exports.BLOCKS.EMBEDDED_RESOURCE];\nvar TABLE_BLOCKS = [exports.BLOCKS.TABLE, exports.BLOCKS.TABLE_ROW, exports.BLOCKS.TABLE_CELL, exports.BLOCKS.TABLE_HEADER_CELL];\n/**\n * Array of all void block types\n */\nvar VOID_BLOCKS = [exports.BLOCKS.HR, exports.BLOCKS.EMBEDDED_ENTRY, exports.BLOCKS.EMBEDDED_ASSET, exports.BLOCKS.EMBEDDED_RESOURCE];\n/**\n * Dictionary of all container block types, and the set block types they accept as children.\n *\n * Note: This does not include `[BLOCKS.DOCUMENT]: TOP_LEVEL_BLOCKS`\n */\nvar CONTAINERS = (_a$1 = {}, _a$1[exports.BLOCKS.OL_LIST] = [exports.BLOCKS.LIST_ITEM], _a$1[exports.BLOCKS.UL_LIST] = [exports.BLOCKS.LIST_ITEM], _a$1[exports.BLOCKS.LIST_ITEM] = LIST_ITEM_BLOCKS, _a$1[exports.BLOCKS.QUOTE] = [exports.BLOCKS.PARAGRAPH], _a$1[exports.BLOCKS.TABLE] = [exports.BLOCKS.TABLE_ROW], _a$1[exports.BLOCKS.TABLE_ROW] = [exports.BLOCKS.TABLE_CELL, exports.BLOCKS.TABLE_HEADER_CELL], _a$1[exports.BLOCKS.TABLE_CELL] = [exports.BLOCKS.PARAGRAPH, exports.BLOCKS.UL_LIST, exports.BLOCKS.OL_LIST], _a$1[exports.BLOCKS.TABLE_HEADER_CELL] = [exports.BLOCKS.PARAGRAPH], _a$1);\n/**\n * Array of all heading levels\n */\nvar HEADINGS = [exports.BLOCKS.HEADING_1, exports.BLOCKS.HEADING_2, exports.BLOCKS.HEADING_3, exports.BLOCKS.HEADING_4, exports.BLOCKS.HEADING_5, exports.BLOCKS.HEADING_6];\n/**\n * Array of all block types that may contain text and inline nodes.\n */\nvar TEXT_CONTAINERS = __spreadArray([exports.BLOCKS.PARAGRAPH], HEADINGS, true);\n/**\n * Node types before `tables` release.\n */\nvar V1_NODE_TYPES = [exports.BLOCKS.DOCUMENT, exports.BLOCKS.PARAGRAPH, exports.BLOCKS.HEADING_1, exports.BLOCKS.HEADING_2, exports.BLOCKS.HEADING_3, exports.BLOCKS.HEADING_4, exports.BLOCKS.HEADING_5, exports.BLOCKS.HEADING_6, exports.BLOCKS.OL_LIST, exports.BLOCKS.UL_LIST, exports.BLOCKS.LIST_ITEM, exports.BLOCKS.HR, exports.BLOCKS.QUOTE, exports.BLOCKS.EMBEDDED_ENTRY, exports.BLOCKS.EMBEDDED_ASSET, exports.INLINES.HYPERLINK, exports.INLINES.ENTRY_HYPERLINK, exports.INLINES.ASSET_HYPERLINK, exports.INLINES.EMBEDDED_ENTRY, 'text'];\n/**\n * Marks before `superscript` & `subscript` release.\n */\nvar V1_MARKS = [exports.MARKS.BOLD, exports.MARKS.CODE, exports.MARKS.ITALIC, exports.MARKS.UNDERLINE];\n\n/**\n * A rich text document considered to be empty.\n * Any other document structure than this is not considered empty.\n */\nvar EMPTY_DOCUMENT = {\n  nodeType: exports.BLOCKS.DOCUMENT,\n  data: {},\n  content: [{\n    nodeType: exports.BLOCKS.PARAGRAPH,\n    data: {},\n    content: [{\n      nodeType: 'text',\n      value: '',\n      marks: [],\n      data: {}\n    }]\n  }]\n};\n\n/**\n * Tiny replacement for Object.values(object).includes(key) to\n * avoid including CoreJS polyfills\n */\nfunction hasValue(obj, value) {\n  for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {\n    var key = _a[_i];\n    if (value === obj[key]) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Checks if the node is an instance of Inline.\n */\nfunction isInline(node) {\n  return hasValue(exports.INLINES, node.nodeType);\n}\n/**\n * Checks if the node is an instance of Block.\n */\nfunction isBlock(node) {\n  return hasValue(exports.BLOCKS, node.nodeType);\n}\n/**\n * Checks if the node is an instance of Text.\n */\nfunction isText(node) {\n  return node.nodeType === 'text';\n}\nvar helpers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  isBlock: isBlock,\n  isInline: isInline,\n  isText: isText\n});\nvar typeMismatchError = function (_a) {\n  var path = _a.path,\n    property = _a.property,\n    typeName = _a.typeName,\n    value = _a.value;\n  return {\n    details: \"The type of \\\"\".concat(property, \"\\\" is incorrect, expected type: \").concat(typeName),\n    name: 'type',\n    path: path.toArray(),\n    type: typeName,\n    value: value\n  };\n};\nvar minSizeError = function (_a) {\n  var min = _a.min,\n    value = _a.value,\n    path = _a.path;\n  return {\n    name: 'size',\n    min: min,\n    path: path.toArray(),\n    details: \"Size must be at least \".concat(min),\n    value: value\n  };\n};\nvar maxSizeError = function (_a) {\n  var max = _a.max,\n    value = _a.value,\n    path = _a.path;\n  return {\n    name: 'size',\n    max: max,\n    path: path.toArray(),\n    details: \"Size must be at most \".concat(max),\n    value: value\n  };\n};\nvar enumError = function (_a) {\n  var expected = _a.expected,\n    value = _a.value,\n    path = _a.path;\n  return {\n    details: \"Value must be one of expected values\",\n    name: 'in',\n    expected: __spreadArray([], expected, true).sort(),\n    path: path.toArray(),\n    value: value\n  };\n};\nvar unknownPropertyError = function (_a) {\n  var property = _a.property,\n    path = _a.path;\n  return {\n    details: \"The property \\\"\".concat(property, \"\\\" is not expected\"),\n    name: 'unexpected',\n    path: path.toArray()\n  };\n};\nvar requiredPropertyError = function (_a) {\n  var property = _a.property,\n    path = _a.path;\n  return {\n    details: \"The property \\\"\".concat(property, \"\\\" is required here\"),\n    name: 'required',\n    path: path.toArray()\n  };\n};\nvar ObjectAssertion = /** @class */function () {\n  function ObjectAssertion(obj, path) {\n    var _this = this;\n    this.obj = obj;\n    this.path = path;\n    this._errors = [];\n    this.catch = function () {\n      var _a;\n      var errors = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        errors[_i] = arguments[_i];\n      }\n      (_a = _this._errors).push.apply(_a, errors);\n    };\n    /**\n     * Asserts the key exists in the object. You probably shouldn't call this\n     * function directly. Instead, use `$.object`, `$.number`, `$.string`, etc.\n     */\n    this.exists = function (key) {\n      if (key in _this.obj) {\n        return true;\n      }\n      _this.catch(requiredPropertyError({\n        property: key,\n        path: _this.path.of(key)\n      }));\n      return false;\n    };\n    /**\n     * Asserts the key exists in the object and its value is a plain object. if\n     * no key is provided, it asserts the object itself.\n     */\n    this.object = function (key) {\n      var _a;\n      var value = key ? _this.obj[key] : _this.obj;\n      if (key) {\n        if (!_this.exists(key)) {\n          return false;\n        }\n      }\n      if (isPlainObject(value)) {\n        return true;\n      }\n      var path = key ? _this.path.of(key) : _this.path;\n      var property = (_a = key !== null && key !== void 0 ? key : _this.path.last()) !== null && _a !== void 0 ? _a : 'value';\n      _this.catch(typeMismatchError({\n        typeName: 'Object',\n        property: property,\n        path: path,\n        value: value\n      }));\n      return false;\n    };\n    /**\n     * Asserts the key exists in the object and its value is a string.\n     */\n    this.string = function (key) {\n      var value = _this.obj[key];\n      if (key && !_this.exists(key)) {\n        return false;\n      }\n      if (typeof value === 'string') {\n        return true;\n      }\n      _this.catch(typeMismatchError({\n        typeName: 'String',\n        property: key,\n        path: _this.path.of(key),\n        value: value\n      }));\n      return false;\n    };\n    /**\n     * Asserts the key exists in the object and its value is a number.\n     */\n    this.number = function (key, optional) {\n      var value = _this.obj[key];\n      if (optional && !(key in _this.obj)) {\n        return true;\n      }\n      if (!_this.exists(key)) {\n        return false;\n      }\n      if (typeof value === 'number' && !Number.isNaN(value)) {\n        return true;\n      }\n      _this.catch(typeMismatchError({\n        typeName: 'Number',\n        property: key,\n        path: _this.path.of(key),\n        value: value\n      }));\n      return false;\n    };\n    /**\n     * Asserts the key exists in the object and its value is an array. You don't\n     * need to manually call this function before `$.each` or `$.maxLength`.\n     */\n    this.array = function (key) {\n      var value = _this.obj[key];\n      if (key && !_this.exists(key)) {\n        return false;\n      }\n      if (Array.isArray(value)) {\n        return true;\n      }\n      _this.catch(typeMismatchError({\n        typeName: 'Array',\n        property: key,\n        path: _this.path.of(key),\n        value: value\n      }));\n      return false;\n    };\n    /**\n     * Asserts the value of the key is one of the expected values.\n     */\n    this.enum = function (key, expected) {\n      var value = _this.obj[key];\n      if (typeof value === 'string' && expected.includes(value)) {\n        return true;\n      }\n      _this.catch(enumError({\n        expected: expected,\n        value: value,\n        path: _this.path.of(key)\n      }));\n      return false;\n    };\n    /**\n     * Asserts the array value of the object key is empty. If the value isn't an\n     * array, the function captures a type error and returns false.\n     */\n    this.empty = function (key) {\n      if (!_this.array(key)) {\n        return false;\n      }\n      var value = _this.obj[key];\n      if (value.length === 0) {\n        return true;\n      }\n      _this.catch(maxSizeError({\n        max: 0,\n        value: value,\n        path: _this.path.of(key)\n      }));\n      return false;\n    };\n    /**\n     * Asserts the length of the value of the object key is at least `min`. If the\n     * value isn't an array, the function captures a type error and returns false.\n     */\n    this.minLength = function (key, min) {\n      if (!_this.array(key)) {\n        return false;\n      }\n      var value = _this.obj[key];\n      if (value.length >= min) {\n        return true;\n      }\n      _this.catch(minSizeError({\n        min: min,\n        value: value,\n        path: _this.path.of(key)\n      }));\n      return false;\n    };\n    /**\n     * Asserts the object has no additional properties other than the ones\n     * specified\n     */\n    this.noAdditionalProperties = function (properties) {\n      var unknowns = Object.keys(_this.obj).sort().filter(function (key) {\n        return !properties.includes(key);\n      });\n      unknowns.forEach(function (property) {\n        return _this.catch(unknownPropertyError({\n          property: property,\n          path: _this.path.of(property)\n        }));\n      });\n      return unknowns.length === 0;\n    };\n    /**\n     * Iterates over the value of the key and assert each item. If the value isn't\n     * an array, the function captures a type error and safely exits.\n     *\n     * To maintain compatibility with previous implementation, we stop early if we\n     * find any errors.\n     */\n    this.each = function (key, assert) {\n      if (!_this.array(key)) {\n        return;\n      }\n      var value = _this.obj[key];\n      var foundErrors = false;\n      value.forEach(function (item, index) {\n        if (foundErrors) {\n          return;\n        }\n        var errors = assert(item, _this.path.of(key).of(index));\n        if (errors.length > 0) {\n          foundErrors = true;\n        }\n        _this.catch.apply(_this, errors);\n      });\n    };\n  }\n  Object.defineProperty(ObjectAssertion.prototype, \"errors\", {\n    get: function () {\n      var _this = this;\n      var serializeError = function (error) {\n        return JSON.stringify({\n          details: error.details,\n          path: error.path\n        });\n      };\n      return this._errors.filter(function (error, index) {\n        return _this._errors.findIndex(function (step) {\n          return serializeError(error) === serializeError(step);\n        }) === index;\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ObjectAssertion;\n}();\nvar VOID_CONTENT = [];\nvar NodeAssertion = /** @class */function () {\n  function NodeAssertion(contentRule, validateData) {\n    this.contentRule = contentRule;\n    this.validateData = validateData;\n  }\n  NodeAssertion.prototype.assert = function (node, path) {\n    var _a, _b;\n    var $ = new ObjectAssertion(node, path);\n    if (!$.object()) {\n      return $.errors;\n    }\n    $.noAdditionalProperties(['nodeType', 'data', 'content']);\n    var _c = Array.isArray(this.contentRule) ? {\n        nodeTypes: this.contentRule\n      } : this.contentRule(node, path),\n      nodeTypes = _c.nodeTypes,\n      _d = _c.min,\n      min = _d === void 0 ? 0 : _d;\n    if (nodeTypes.length === 0 && min > 0) {\n      throw new Error(\"Invalid content rule. Cannot have enforce a 'min' of \".concat(min, \" with no nodeTypes\"));\n    }\n    $.minLength('content', min);\n    // Is void\n    if (nodeTypes.length === 0) {\n      $.empty('content');\n    }\n    // Ensure content nodes have valid nodeTypes without validating the full\n    // shape which is something that's only done later if the current node is\n    // valid.\n    else {\n      $.each('content', function (item, path) {\n        var item$ = new ObjectAssertion(item, path);\n        if (!item$.object()) {\n          return item$.errors;\n        }\n        item$.enum('nodeType', nodeTypes);\n        return item$.errors;\n      });\n    }\n    if ($.object('data')) {\n      var dataErrors = (_b = (_a = this.validateData) === null || _a === void 0 ? void 0 : _a.call(this, node.data, path.of('data'))) !== null && _b !== void 0 ? _b : [];\n      $.catch.apply($, dataErrors);\n    }\n    return $.errors;\n  };\n  return NodeAssertion;\n}();\nvar EntityLinkAssertion = /** @class */function (_super) {\n  __extends(EntityLinkAssertion, _super);\n  function EntityLinkAssertion(linkType, contentNodeTypes) {\n    var _this = _super.call(this, contentNodeTypes, function (data, path) {\n      return _this.assertLink(data, path);\n    }) || this;\n    _this.linkType = linkType;\n    _this.assertLink = function (data, path) {\n      var $ = new ObjectAssertion(data, path);\n      if ($.object('target')) {\n        var sys$ = new ObjectAssertion(data.target.sys, path.of('target').of('sys'));\n        if (sys$.object()) {\n          sys$.enum('type', [_this.type]);\n          sys$.enum('linkType', [_this.linkType]);\n          if (_this.type === 'Link') {\n            sys$.string('id');\n            sys$.noAdditionalProperties(['type', 'linkType', 'id']);\n          } else if (_this.type === 'ResourceLink') {\n            sys$.string('urn');\n            sys$.noAdditionalProperties(['type', 'linkType', 'urn']);\n          }\n        }\n        $.catch.apply($, sys$.errors);\n      }\n      $.noAdditionalProperties(['target']);\n      return $.errors;\n    };\n    _this.type = _this.linkType.startsWith('Contentful:') ? 'ResourceLink' : 'Link';\n    return _this;\n  }\n  return EntityLinkAssertion;\n}(NodeAssertion);\nvar HyperLinkAssertion = /** @class */function (_super) {\n  __extends(HyperLinkAssertion, _super);\n  function HyperLinkAssertion() {\n    var _this = _super.call(this, ['text'], function (data, path) {\n      return _this.assertLink(data, path);\n    }) || this;\n    _this.assertLink = function (data, path) {\n      var $ = new ObjectAssertion(data, path);\n      $.string('uri');\n      $.noAdditionalProperties(['uri']);\n      return $.errors;\n    };\n    return _this;\n  }\n  return HyperLinkAssertion;\n}(NodeAssertion);\nvar assert = function (contentRule, validateData) {\n  return new NodeAssertion(contentRule, validateData);\n};\nvar assertLink = function (linkType, contentRule) {\n  return new EntityLinkAssertion(linkType, contentRule);\n};\nvar Path = /** @class */function () {\n  function Path(path) {\n    if (path === void 0) {\n      path = [];\n    }\n    var _this = this;\n    this.path = path;\n    this.of = function (element) {\n      return new Path(__spreadArray(__spreadArray([], _this.path, true), [element], false));\n    };\n    this.isRoot = function () {\n      return _this.path.length === 0;\n    };\n    this.last = function () {\n      return _this.path[_this.path.length - 1];\n    };\n    this.toArray = function () {\n      return _this.path;\n    };\n  }\n  return Path;\n}();\nfunction assertText(text, path) {\n  var $ = new ObjectAssertion(text, path);\n  if (!$.object()) {\n    return $.errors;\n  }\n  $.noAdditionalProperties(['nodeType', 'data', 'value', 'marks']);\n  $.object('data');\n  $.each('marks', function (mark, path) {\n    var mark$ = new ObjectAssertion(mark, path);\n    if (!mark$.object()) {\n      return mark$.errors;\n    }\n    // For historical reasons, we don't explicitly check for supported marks\n    // e.g. bold, italic ..etc. This makes it possible for a customer to add\n    // custom marks\n    mark$.string('type');\n    return mark$.errors;\n  });\n  $.string('value');\n  return $.errors;\n}\nvar _a;\nvar assertInlineOrText = assert(__spreadArray(__spreadArray([], Object.values(exports.INLINES), true), ['text'], false).sort());\nvar assertList = assert([exports.BLOCKS.LIST_ITEM]);\nvar assertVoidEntryLink = assertLink('Entry', VOID_CONTENT);\nvar assertTableCell = assert(function () {\n  return {\n    nodeTypes: [exports.BLOCKS.PARAGRAPH],\n    min: 1\n  };\n}, function (data, path) {\n  var $ = new ObjectAssertion(data, path);\n  $.noAdditionalProperties(['colspan', 'rowspan']);\n  $.number('colspan', true);\n  $.number('rowspan', true);\n  return $.errors;\n});\nvar nodeValidator = (_a = {}, _a[exports.BLOCKS.DOCUMENT] = assert(TOP_LEVEL_BLOCKS), _a[exports.BLOCKS.PARAGRAPH] = assertInlineOrText, _a[exports.BLOCKS.HEADING_1] = assertInlineOrText, _a[exports.BLOCKS.HEADING_2] = assertInlineOrText, _a[exports.BLOCKS.HEADING_3] = assertInlineOrText, _a[exports.BLOCKS.HEADING_4] = assertInlineOrText, _a[exports.BLOCKS.HEADING_5] = assertInlineOrText, _a[exports.BLOCKS.HEADING_6] = assertInlineOrText, _a[exports.BLOCKS.QUOTE] = assert(CONTAINERS[exports.BLOCKS.QUOTE]), _a[exports.BLOCKS.EMBEDDED_ENTRY] = assertVoidEntryLink, _a[exports.BLOCKS.EMBEDDED_ASSET] = assertLink('Asset', VOID_CONTENT), _a[exports.BLOCKS.EMBEDDED_RESOURCE] = assertLink('Contentful:Entry', VOID_CONTENT), _a[exports.BLOCKS.HR] = assert(VOID_CONTENT), _a[exports.BLOCKS.OL_LIST] = assertList, _a[exports.BLOCKS.UL_LIST] = assertList, _a[exports.BLOCKS.LIST_ITEM] = assert(__spreadArray([], LIST_ITEM_BLOCKS, true).sort()), _a[exports.BLOCKS.TABLE] = assert(function () {\n  return {\n    nodeTypes: [exports.BLOCKS.TABLE_ROW],\n    min: 1\n  };\n}), _a[exports.BLOCKS.TABLE_ROW] = assert(function () {\n  return {\n    nodeTypes: [exports.BLOCKS.TABLE_CELL, exports.BLOCKS.TABLE_HEADER_CELL],\n    min: 1\n  };\n}), _a[exports.BLOCKS.TABLE_CELL] = assertTableCell, _a[exports.BLOCKS.TABLE_HEADER_CELL] = assertTableCell, _a[exports.INLINES.HYPERLINK] = new HyperLinkAssertion(), _a[exports.INLINES.EMBEDDED_ENTRY] = assertVoidEntryLink, _a[exports.INLINES.EMBEDDED_RESOURCE] = assertLink('Contentful:Entry', VOID_CONTENT), _a[exports.INLINES.ENTRY_HYPERLINK] = assertLink('Entry', ['text']), _a[exports.INLINES.ASSET_HYPERLINK] = assertLink('Asset', ['text']), _a[exports.INLINES.RESOURCE_HYPERLINK] = assertLink('Contentful:Entry', ['text']), _a);\nfunction validateNode(node, path) {\n  if (node.nodeType === 'text') {\n    return assertText(node, path);\n  }\n  var errors = nodeValidator[node.nodeType].assert(node, path);\n  if (errors.length > 0) {\n    return errors;\n  }\n  var $ = new ObjectAssertion(node, path);\n  $.each('content', function (item, path) {\n    // We already know those are valid nodes thanks to the assertion done in\n    // the NodeAssertion class\n    return validateNode(item, path);\n  });\n  return $.errors;\n}\nvar validateRichTextDocument = function (document) {\n  var path = new Path();\n  var $ = new ObjectAssertion(document, path);\n  if ($.object()) {\n    $.enum('nodeType', [exports.BLOCKS.DOCUMENT]);\n  }\n  if ($.errors.length > 0) {\n    return $.errors;\n  }\n  return validateNode(document, path);\n};\nexports.CONTAINERS = CONTAINERS;\nexports.EMPTY_DOCUMENT = EMPTY_DOCUMENT;\nexports.HEADINGS = HEADINGS;\nexports.LIST_ITEM_BLOCKS = LIST_ITEM_BLOCKS;\nexports.TABLE_BLOCKS = TABLE_BLOCKS;\nexports.TEXT_CONTAINERS = TEXT_CONTAINERS;\nexports.TOP_LEVEL_BLOCKS = TOP_LEVEL_BLOCKS;\nexports.V1_MARKS = V1_MARKS;\nexports.V1_NODE_TYPES = V1_NODE_TYPES;\nexports.VOID_BLOCKS = VOID_BLOCKS;\nexports.helpers = helpers;\nexports.validateRichTextDocument = validateRichTextDocument;","map":{"version":3,"names":["exports","BLOCKS","INLINES","MARKS","TOP_LEVEL_BLOCKS","PARAGRAPH","HEADING_1","HEADING_2","HEADING_3","HEADING_4","HEADING_5","HEADING_6","OL_LIST","UL_LIST","HR","QUOTE","EMBEDDED_ENTRY","EMBEDDED_ASSET","EMBEDDED_RESOURCE","TABLE","LIST_ITEM_BLOCKS","TABLE_BLOCKS","TABLE_ROW","TABLE_CELL","TABLE_HEADER_CELL","VOID_BLOCKS","CONTAINERS","_a$1","LIST_ITEM","HEADINGS","TEXT_CONTAINERS","__spreadArray","V1_NODE_TYPES","DOCUMENT","HYPERLINK","ENTRY_HYPERLINK","ASSET_HYPERLINK","V1_MARKS","BOLD","CODE","ITALIC","UNDERLINE","EMPTY_DOCUMENT","nodeType","data","content","value","marks","hasValue","obj","_i","_a","Object","keys","length","key","isInline","node","isBlock","isText","typeMismatchError","path","property","typeName","details","concat","name","toArray","type","minSizeError","min","maxSizeError","max","enumError","expected","sort","unknownPropertyError","requiredPropertyError","ObjectAssertion","_this","_errors","catch","errors","arguments","push","apply","exists","of","object","isPlainObject","last","string","number","optional","Number","isNaN","array","Array","isArray","enum","includes","empty","minLength","noAdditionalProperties","properties","unknowns","filter","forEach","each","assert","foundErrors","item","index","defineProperty","prototype","get","serializeError","error","JSON","stringify","findIndex","step","VOID_CONTENT","NodeAssertion","contentRule","validateData","$","_c","nodeTypes","_d","Error","item$","dataErrors","_b","call","EntityLinkAssertion","_super","__extends","linkType","contentNodeTypes","assertLink","sys$","target","sys","startsWith","HyperLinkAssertion","Path","element","isRoot","assertText","text","mark","mark$","assertInlineOrText","values","assertList","assertVoidEntryLink","assertTableCell","nodeValidator","RESOURCE_HYPERLINK","validateNode","validateRichTextDocument","document"],"sources":["C:\\Users\\ainge\\OneDrive\\Documents\\GitHub\\mr-ingerson-blog\\node_modules\\@contentful\\rich-text-react-renderer\\node_modules\\@contentful\\rich-text-types\\src\\blocks.ts","C:\\Users\\ainge\\OneDrive\\Documents\\GitHub\\mr-ingerson-blog\\node_modules\\@contentful\\rich-text-react-renderer\\node_modules\\@contentful\\rich-text-types\\src\\inlines.ts","C:\\Users\\ainge\\OneDrive\\Documents\\GitHub\\mr-ingerson-blog\\node_modules\\@contentful\\rich-text-react-renderer\\node_modules\\@contentful\\rich-text-types\\src\\marks.ts","C:\\Users\\ainge\\OneDrive\\Documents\\GitHub\\mr-ingerson-blog\\node_modules\\@contentful\\rich-text-react-renderer\\node_modules\\@contentful\\rich-text-types\\src\\schemaConstraints.ts","C:\\Users\\ainge\\OneDrive\\Documents\\GitHub\\mr-ingerson-blog\\node_modules\\@contentful\\rich-text-react-renderer\\node_modules\\@contentful\\rich-text-types\\src\\emptyDocument.ts","C:\\Users\\ainge\\OneDrive\\Documents\\GitHub\\mr-ingerson-blog\\node_modules\\@contentful\\rich-text-react-renderer\\node_modules\\@contentful\\rich-text-types\\src\\helpers.ts","C:\\Users\\ainge\\OneDrive\\Documents\\GitHub\\mr-ingerson-blog\\node_modules\\@contentful\\rich-text-react-renderer\\node_modules\\@contentful\\rich-text-types\\src\\validator\\errors.ts","C:\\Users\\ainge\\OneDrive\\Documents\\GitHub\\mr-ingerson-blog\\node_modules\\@contentful\\rich-text-react-renderer\\node_modules\\@contentful\\rich-text-types\\src\\validator\\assert.ts","C:\\Users\\ainge\\OneDrive\\Documents\\GitHub\\mr-ingerson-blog\\node_modules\\@contentful\\rich-text-react-renderer\\node_modules\\@contentful\\rich-text-types\\src\\validator\\node.ts","C:\\Users\\ainge\\OneDrive\\Documents\\GitHub\\mr-ingerson-blog\\node_modules\\@contentful\\rich-text-react-renderer\\node_modules\\@contentful\\rich-text-types\\src\\validator\\path.ts","C:\\Users\\ainge\\OneDrive\\Documents\\GitHub\\mr-ingerson-blog\\node_modules\\@contentful\\rich-text-react-renderer\\node_modules\\@contentful\\rich-text-types\\src\\validator\\text.ts","C:\\Users\\ainge\\OneDrive\\Documents\\GitHub\\mr-ingerson-blog\\node_modules\\@contentful\\rich-text-react-renderer\\node_modules\\@contentful\\rich-text-types\\src\\validator\\index.ts"],"sourcesContent":["/**\n * Map of all Contentful block types. Blocks contain inline or block nodes.\n */\nexport enum BLOCKS {\n  DOCUMENT = 'document',\n  PARAGRAPH = 'paragraph',\n\n  HEADING_1 = 'heading-1',\n  HEADING_2 = 'heading-2',\n  HEADING_3 = 'heading-3',\n  HEADING_4 = 'heading-4',\n  HEADING_5 = 'heading-5',\n  HEADING_6 = 'heading-6',\n\n  OL_LIST = 'ordered-list',\n  UL_LIST = 'unordered-list',\n  LIST_ITEM = 'list-item',\n\n  HR = 'hr',\n  QUOTE = 'blockquote',\n\n  EMBEDDED_ENTRY = 'embedded-entry-block',\n  EMBEDDED_ASSET = 'embedded-asset-block',\n  EMBEDDED_RESOURCE = 'embedded-resource-block',\n\n  TABLE = 'table',\n  TABLE_ROW = 'table-row',\n  TABLE_CELL = 'table-cell',\n  TABLE_HEADER_CELL = 'table-header-cell',\n}\n","/**\n * Map of all Contentful inline types. Inline contain inline or text nodes.\n *\n * @note This should be kept in alphabetical order since the\n * [validation package](https://github.com/contentful/content-stack/tree/master/packages/validation)\n *  relies on the values being in a predictable order.\n */\nexport enum INLINES {\n  ASSET_HYPERLINK = 'asset-hyperlink',\n  EMBEDDED_ENTRY = 'embedded-entry-inline',\n  EMBEDDED_RESOURCE = 'embedded-resource-inline',\n  ENTRY_HYPERLINK = 'entry-hyperlink',\n  HYPERLINK = 'hyperlink',\n  RESOURCE_HYPERLINK = 'resource-hyperlink',\n}\n","/**\n * Map of all Contentful marks.\n */\nexport enum MARKS {\n  BOLD = 'bold',\n  ITALIC = 'italic',\n  UNDERLINE = 'underline',\n  CODE = 'code',\n  SUPERSCRIPT = 'superscript',\n  SUBSCRIPT = 'subscript',\n  STRIKETHROUGH = 'strikethrough',\n}\n","import { BLOCKS } from './blocks';\nimport { INLINES } from './inlines';\nimport { MARKS } from './marks';\n\nexport type TopLevelBlockEnum =\n  | BLOCKS.PARAGRAPH\n  | BLOCKS.HEADING_1\n  | BLOCKS.HEADING_2\n  | BLOCKS.HEADING_3\n  | BLOCKS.HEADING_4\n  | BLOCKS.HEADING_5\n  | BLOCKS.HEADING_6\n  | BLOCKS.OL_LIST\n  | BLOCKS.UL_LIST\n  | BLOCKS.HR\n  | BLOCKS.QUOTE\n  | BLOCKS.EMBEDDED_ENTRY\n  | BLOCKS.EMBEDDED_ASSET\n  | BLOCKS.EMBEDDED_RESOURCE\n  | BLOCKS.TABLE;\n\n/**\n * Array of all top level block types.\n * Only these block types can be the direct children of the document.\n */\nexport const TOP_LEVEL_BLOCKS: TopLevelBlockEnum[] = [\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n  BLOCKS.TABLE,\n];\n\nexport type ListItemBlockEnum =\n  | BLOCKS.PARAGRAPH\n  | BLOCKS.HEADING_1\n  | BLOCKS.HEADING_2\n  | BLOCKS.HEADING_3\n  | BLOCKS.HEADING_4\n  | BLOCKS.HEADING_5\n  | BLOCKS.HEADING_6\n  | BLOCKS.OL_LIST\n  | BLOCKS.UL_LIST\n  | BLOCKS.HR\n  | BLOCKS.QUOTE\n  | BLOCKS.EMBEDDED_ENTRY\n  | BLOCKS.EMBEDDED_ASSET\n  | BLOCKS.EMBEDDED_RESOURCE;\n\n/**\n * Array of all allowed block types inside list items\n */\nexport const LIST_ITEM_BLOCKS: TopLevelBlockEnum[] = [\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n];\n\nexport const TABLE_BLOCKS = [\n  BLOCKS.TABLE,\n  BLOCKS.TABLE_ROW,\n  BLOCKS.TABLE_CELL,\n  BLOCKS.TABLE_HEADER_CELL,\n];\n\n/**\n * Array of all void block types\n */\nexport const VOID_BLOCKS = [\n  BLOCKS.HR,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n];\n\n/**\n * Dictionary of all container block types, and the set block types they accept as children.\n *\n * Note: This does not include `[BLOCKS.DOCUMENT]: TOP_LEVEL_BLOCKS`\n */\nexport const CONTAINERS = {\n  [BLOCKS.OL_LIST]: [BLOCKS.LIST_ITEM],\n  [BLOCKS.UL_LIST]: [BLOCKS.LIST_ITEM],\n  [BLOCKS.LIST_ITEM]: LIST_ITEM_BLOCKS,\n  [BLOCKS.QUOTE]: [BLOCKS.PARAGRAPH],\n  [BLOCKS.TABLE]: [BLOCKS.TABLE_ROW],\n  [BLOCKS.TABLE_ROW]: [BLOCKS.TABLE_CELL, BLOCKS.TABLE_HEADER_CELL],\n  [BLOCKS.TABLE_CELL]: [BLOCKS.PARAGRAPH, BLOCKS.UL_LIST, BLOCKS.OL_LIST],\n  [BLOCKS.TABLE_HEADER_CELL]: [BLOCKS.PARAGRAPH],\n};\n\n/**\n * Array of all heading levels\n */\nexport const HEADINGS = [\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n];\n\n/**\n * Array of all block types that may contain text and inline nodes.\n */\nexport const TEXT_CONTAINERS = [BLOCKS.PARAGRAPH, ...HEADINGS];\n\n/**\n * Node types before `tables` release.\n */\nexport const V1_NODE_TYPES = [\n  BLOCKS.DOCUMENT,\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.LIST_ITEM,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  INLINES.HYPERLINK,\n  INLINES.ENTRY_HYPERLINK,\n  INLINES.ASSET_HYPERLINK,\n  INLINES.EMBEDDED_ENTRY,\n  'text',\n];\n\n/**\n * Marks before `superscript` & `subscript` release.\n */\nexport const V1_MARKS = [MARKS.BOLD, MARKS.CODE, MARKS.ITALIC, MARKS.UNDERLINE];\n","import { BLOCKS } from './blocks';\nimport { Document } from './types';\n\n/**\n * A rich text document considered to be empty.\n * Any other document structure than this is not considered empty.\n */\nexport const EMPTY_DOCUMENT: Document = {\n  nodeType: BLOCKS.DOCUMENT,\n  data: {},\n  content: [\n    {\n      nodeType: BLOCKS.PARAGRAPH,\n      data: {},\n      content: [\n        {\n          nodeType: 'text',\n          value: '',\n          marks: [],\n          data: {},\n        },\n      ],\n    },\n  ],\n};\n","import { BLOCKS } from './blocks';\nimport { INLINES } from './inlines';\nimport { Block, Inline, Node, Text } from './types';\n\n/**\n * Tiny replacement for Object.values(object).includes(key) to\n * avoid including CoreJS polyfills\n */\nfunction hasValue(obj: Record<string, unknown>, value: unknown) {\n  for (const key of Object.keys(obj)) {\n    if (value === obj[key]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Checks if the node is an instance of Inline.\n */\nexport function isInline(node: Node): node is Inline {\n  return hasValue(INLINES, node.nodeType);\n}\n\n/**\n * Checks if the node is an instance of Block.\n */\nexport function isBlock(node: Node): node is Block {\n  return hasValue(BLOCKS, node.nodeType);\n}\n\n/**\n * Checks if the node is an instance of Text.\n */\nexport function isText(node: Node): node is Text {\n  return node.nodeType === 'text';\n}\n","import { ValidationError } from '.';\nimport type { Path } from './path';\n\nexport const typeMismatchError = ({\n  path,\n  property,\n  typeName,\n  value,\n}: {\n  path: Path;\n  property: string | number;\n  typeName: string;\n  value: any;\n}): ValidationError => {\n  return {\n    details: `The type of \"${property}\" is incorrect, expected type: ${typeName}`,\n    name: 'type',\n    path: path.toArray(),\n    type: typeName,\n    value,\n  };\n};\n\nexport const minSizeError = ({\n  min,\n  value,\n  path,\n}: {\n  min: number;\n  value: any;\n  path: Path;\n}): ValidationError => {\n  return {\n    name: 'size',\n    min,\n    path: path.toArray(),\n    details: `Size must be at least ${min}`,\n    value,\n  };\n};\n\nexport const maxSizeError = ({\n  max,\n  value,\n  path,\n}: {\n  max: number;\n  value: any;\n  path: Path;\n}): ValidationError => {\n  return {\n    name: 'size',\n    max,\n    path: path.toArray(),\n    details: `Size must be at most ${max}`,\n    value,\n  };\n};\n\nexport const enumError = ({\n  expected,\n  value,\n  path,\n}: {\n  expected: string[];\n  value: any;\n  path: Path;\n}): ValidationError => {\n  return {\n    details: `Value must be one of expected values`,\n    name: 'in',\n    expected: [...expected].sort(),\n    path: path.toArray(),\n    value,\n  };\n};\n\nexport const unknownPropertyError = ({\n  property,\n  path,\n}: {\n  property: string;\n  path: Path;\n}): ValidationError => {\n  return {\n    details: `The property \"${property}\" is not expected`,\n    name: 'unexpected',\n    path: path.toArray(),\n  };\n};\n\nexport const requiredPropertyError = ({\n  property,\n  path,\n}: {\n  property: string;\n  path: Path;\n}): ValidationError => {\n  return {\n    details: `The property \"${property}\" is required here`,\n    name: 'required',\n    path: path.toArray(),\n  };\n};\n","import isPlainObject from 'is-plain-obj';\n\nimport { ValidationError } from '.';\nimport {\n  maxSizeError,\n  typeMismatchError,\n  enumError,\n  unknownPropertyError,\n  requiredPropertyError,\n  minSizeError,\n} from './errors';\nimport type { Path } from './path';\n\nexport class ObjectAssertion {\n  private _errors: ValidationError[] = [];\n\n  constructor(\n    private readonly obj: Record<string, any>,\n    private readonly path: Path,\n  ) {}\n\n  catch = (...errors: ValidationError[]): void => {\n    this._errors.push(...errors);\n  };\n\n  get errors(): ValidationError[] {\n    const serializeError = (error: ValidationError): string =>\n      JSON.stringify({\n        details: error.details,\n        path: error.path,\n      });\n\n    return this._errors.filter(\n      (error, index) =>\n        this._errors.findIndex((step) => serializeError(error) === serializeError(step)) === index,\n    );\n  }\n\n  /**\n   * Asserts the key exists in the object. You probably shouldn't call this\n   * function directly. Instead, use `$.object`, `$.number`, `$.string`, etc.\n   */\n  exists = (key: string): boolean => {\n    if (key in this.obj) {\n      return true;\n    }\n\n    this.catch(\n      requiredPropertyError({\n        property: key,\n        path: this.path.of(key),\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the key exists in the object and its value is a plain object. if\n   * no key is provided, it asserts the object itself.\n   */\n  public object = (key?: string): boolean => {\n    const value = key ? this.obj[key] : this.obj;\n\n    if (key) {\n      if (!this.exists(key)) {\n        return false;\n      }\n    }\n\n    if (isPlainObject(value)) {\n      return true;\n    }\n\n    const path = key ? this.path.of(key) : this.path;\n    const property = key ?? this.path.last() ?? 'value';\n\n    this.catch(\n      typeMismatchError({\n        typeName: 'Object',\n        property,\n        path,\n        value,\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the key exists in the object and its value is a string.\n   */\n  public string = (key: string): boolean => {\n    const value = this.obj[key];\n\n    if (key && !this.exists(key)) {\n      return false;\n    }\n\n    if (typeof value === 'string') {\n      return true;\n    }\n\n    this.catch(\n      typeMismatchError({\n        typeName: 'String',\n        property: key,\n        path: this.path.of(key),\n        value,\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the key exists in the object and its value is a number.\n   */\n  public number = (key: string, optional?: boolean): boolean => {\n    const value = this.obj[key];\n\n    if (optional && !(key in this.obj)) {\n      return true;\n    }\n\n    if (!this.exists(key)) {\n      return false;\n    }\n\n    if (typeof value === 'number' && !Number.isNaN(value)) {\n      return true;\n    }\n\n    this.catch(\n      typeMismatchError({\n        typeName: 'Number',\n        property: key,\n        path: this.path.of(key),\n        value,\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the key exists in the object and its value is an array. You don't\n   * need to manually call this function before `$.each` or `$.maxLength`.\n   */\n  public array = (key: string): boolean => {\n    const value = this.obj[key];\n\n    if (key && !this.exists(key)) {\n      return false;\n    }\n\n    if (Array.isArray(value)) {\n      return true;\n    }\n\n    this.catch(\n      typeMismatchError({\n        typeName: 'Array',\n        property: key,\n        path: this.path.of(key),\n        value,\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the value of the key is one of the expected values.\n   */\n  public enum = (key: string, expected: string[]): boolean => {\n    const value = this.obj[key];\n\n    if (typeof value === 'string' && expected.includes(value)) {\n      return true;\n    }\n\n    this.catch(\n      enumError({\n        expected,\n        value,\n        path: this.path.of(key),\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the array value of the object key is empty. If the value isn't an\n   * array, the function captures a type error and returns false.\n   */\n  public empty = (key: string): boolean => {\n    if (!this.array(key)) {\n      return false;\n    }\n\n    const value = this.obj[key] as Array<unknown>;\n\n    if (value.length === 0) {\n      return true;\n    }\n\n    this.catch(\n      maxSizeError({\n        max: 0,\n        value,\n        path: this.path.of(key),\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the length of the value of the object key is at least `min`. If the\n   * value isn't an array, the function captures a type error and returns false.\n   */\n  public minLength = (key: string, min: number): boolean => {\n    if (!this.array(key)) {\n      return false;\n    }\n\n    const value = this.obj[key] as Array<unknown>;\n\n    if (value.length >= min) {\n      return true;\n    }\n\n    this.catch(\n      minSizeError({\n        min,\n        value,\n        path: this.path.of(key),\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the object has no additional properties other than the ones\n   * specified\n   */\n  public noAdditionalProperties = (properties: string[]): boolean => {\n    const unknowns = Object.keys(this.obj)\n      .sort()\n      .filter((key) => !properties.includes(key));\n\n    unknowns.forEach((property) =>\n      this.catch(\n        unknownPropertyError({\n          property,\n          path: this.path.of(property),\n        }),\n      ),\n    );\n\n    return unknowns.length === 0;\n  };\n\n  /**\n   * Iterates over the value of the key and assert each item. If the value isn't\n   * an array, the function captures a type error and safely exits.\n   *\n   * To maintain compatibility with previous implementation, we stop early if we\n   * find any errors.\n   */\n  public each = (key: string, assert: (item: any, path: Path) => ValidationError[]): void => {\n    if (!this.array(key)) {\n      return;\n    }\n\n    const value = this.obj[key] as Array<any>;\n\n    let foundErrors = false;\n    value.forEach((item, index) => {\n      if (foundErrors) {\n        return;\n      }\n\n      const errors = assert(item, this.path.of(key).of(index));\n\n      if (errors.length > 0) {\n        foundErrors = true;\n      }\n\n      this.catch(...errors);\n    });\n  };\n}\n","import { ValidationError } from '.';\nimport {\n  AssetHyperlink,\n  AssetLinkBlock,\n  EntryHyperlink,\n  EntryLinkBlock,\n  Hyperlink,\n  ResourceLinkBlock,\n  ResourceLinkInline,\n} from '../nodeTypes';\nimport { Block, Document, Inline } from '../types';\nimport { ObjectAssertion } from './assert';\nimport type { Path } from './path';\n\nexport type Node = Document | Block | Inline;\n\nexport type GetContentRule<T extends Node> =\n  | string[]\n  | ((\n      node: T,\n      path: Path,\n    ) => {\n      nodeTypes: string[];\n      min?: number;\n    });\n\nexport type ValidateData<T extends Node> = (data: T['data'], path: Path) => ValidationError[];\n\nexport const VOID_CONTENT: GetContentRule<Node> = [];\n\nexport class NodeAssertion<T extends Node = Node> {\n  constructor(\n    private contentRule: GetContentRule<T>,\n    private validateData?: ValidateData<T>,\n  ) {}\n\n  assert(node: T, path: Path): ValidationError[] {\n    const $ = new ObjectAssertion(node, path);\n\n    if (!$.object()) {\n      return $.errors;\n    }\n\n    $.noAdditionalProperties(['nodeType', 'data', 'content']);\n\n    const { nodeTypes, min = 0 } = Array.isArray(this.contentRule)\n      ? {\n          nodeTypes: this.contentRule,\n        }\n      : this.contentRule(node, path);\n\n    if (nodeTypes.length === 0 && min > 0) {\n      throw new Error(\n        `Invalid content rule. Cannot have enforce a 'min' of ${min} with no nodeTypes`,\n      );\n    }\n\n    $.minLength('content', min);\n\n    // Is void\n    if (nodeTypes.length === 0) {\n      $.empty('content');\n    }\n\n    // Ensure content nodes have valid nodeTypes without validating the full\n    // shape which is something that's only done later if the current node is\n    // valid.\n    else {\n      $.each('content', (item, path) => {\n        const item$ = new ObjectAssertion(item, path);\n\n        if (!item$.object()) {\n          return item$.errors;\n        }\n\n        item$.enum('nodeType', nodeTypes);\n\n        return item$.errors;\n      });\n    }\n\n    if ($.object('data')) {\n      const dataErrors = this.validateData?.(node.data, path.of('data')) ?? [];\n      $.catch(...dataErrors);\n    }\n\n    return $.errors;\n  }\n}\n\nexport class EntityLinkAssertion<\n  T extends\n    | EntryLinkBlock\n    | EntryHyperlink\n    | AssetLinkBlock\n    | AssetHyperlink\n    | ResourceLinkBlock\n    | ResourceLinkInline,\n> extends NodeAssertion<T> {\n  private type: 'ResourceLink' | 'Link';\n\n  constructor(\n    private linkType: 'Entry' | 'Asset' | 'Contentful:Entry',\n    contentNodeTypes: GetContentRule<T>,\n  ) {\n    super(contentNodeTypes, (data, path) => this.assertLink(data, path));\n    this.type = this.linkType.startsWith('Contentful:') ? 'ResourceLink' : 'Link';\n  }\n\n  private assertLink = (data: T['data'], path: Path): ValidationError[] => {\n    const $ = new ObjectAssertion(data, path);\n\n    if ($.object('target')) {\n      const sys$ = new ObjectAssertion(data.target.sys, path.of('target').of('sys'));\n\n      if (sys$.object()) {\n        sys$.enum('type', [this.type]);\n        sys$.enum('linkType', [this.linkType]);\n\n        if (this.type === 'Link') {\n          sys$.string('id');\n          sys$.noAdditionalProperties(['type', 'linkType', 'id']);\n        } else if (this.type === 'ResourceLink') {\n          sys$.string('urn');\n          sys$.noAdditionalProperties(['type', 'linkType', 'urn']);\n        }\n      }\n\n      $.catch(...sys$.errors);\n    }\n\n    $.noAdditionalProperties(['target']);\n\n    return $.errors;\n  };\n}\n\nexport class HyperLinkAssertion<T extends Hyperlink> extends NodeAssertion<T> {\n  constructor() {\n    super(['text'], (data, path) => this.assertLink(data, path));\n  }\n\n  private assertLink = (data: T['data'], path: Path): ValidationError[] => {\n    const $ = new ObjectAssertion(data, path);\n\n    $.string('uri');\n    $.noAdditionalProperties(['uri']);\n\n    return $.errors;\n  };\n}\n\nexport const assert = <T extends Node>(\n  contentRule: GetContentRule<T>,\n  validateData?: ValidateData<T>,\n): NodeAssertion<T> => {\n  return new NodeAssertion(contentRule, validateData);\n};\n\nexport const assertLink = <\n  T extends\n    | EntryLinkBlock\n    | EntryHyperlink\n    | AssetLinkBlock\n    | AssetHyperlink\n    | ResourceLinkBlock\n    | ResourceLinkInline,\n>(\n  linkType: 'Entry' | 'Asset' | 'Contentful:Entry',\n  contentRule: GetContentRule<T>,\n): EntityLinkAssertion<T> => {\n  return new EntityLinkAssertion(linkType, contentRule);\n};\n","export class Path {\n  constructor(private readonly path: (string | number)[] = []) {}\n\n  of = (element: string | number): Path => {\n    return new Path([...this.path, element]);\n  };\n\n  isRoot = (): boolean => {\n    return this.path.length === 0;\n  };\n\n  last = (): string | number | undefined => {\n    return this.path[this.path.length - 1];\n  };\n\n  toArray = (): (string | number)[] => {\n    return this.path;\n  };\n}\n","import { ValidationError } from '.';\nimport { Text } from '../types';\nimport { ObjectAssertion } from './assert';\nimport type { Path } from './path';\n\nexport function assertText(text: Text, path: Path): ValidationError[] {\n  const $ = new ObjectAssertion(text, path);\n\n  if (!$.object()) {\n    return $.errors;\n  }\n\n  $.noAdditionalProperties(['nodeType', 'data', 'value', 'marks']);\n\n  $.object('data');\n  $.each('marks', (mark, path) => {\n    const mark$ = new ObjectAssertion(mark, path);\n\n    if (!mark$.object()) {\n      return mark$.errors;\n    }\n\n    // For historical reasons, we don't explicitly check for supported marks\n    // e.g. bold, italic ..etc. This makes it possible for a customer to add\n    // custom marks\n    mark$.string('type');\n\n    return mark$.errors;\n  });\n\n  $.string('value');\n\n  return $.errors;\n}\n","import { BLOCKS } from '../blocks';\nimport { INLINES } from '../inlines';\nimport { CONTAINERS, LIST_ITEM_BLOCKS, TOP_LEVEL_BLOCKS } from '../schemaConstraints';\nimport { Document, Text } from '../types';\nimport { ObjectAssertion } from './assert';\nimport { NodeAssertion, Node, HyperLinkAssertion, assert, assertLink, VOID_CONTENT } from './node';\nimport { Path } from './path';\nimport { assertText } from './text';\n\nexport type ValidationError = {\n  name: string;\n  type?: string;\n  value?: Record<string, any> | string | number | boolean | null;\n  min?: number | string;\n  max?: number | string;\n  details?: string | null;\n  path?: (string | number)[];\n  contentTypeId?: string | string[];\n  nodeType?: string;\n  customMessage?: string;\n  expected?: string[];\n};\n\nconst assertInlineOrText = assert([...Object.values(INLINES), 'text'].sort());\n\nconst assertList = assert([BLOCKS.LIST_ITEM]);\nconst assertVoidEntryLink = assertLink('Entry', VOID_CONTENT);\nconst assertTableCell = assert(\n  () => ({\n    nodeTypes: [BLOCKS.PARAGRAPH],\n    min: 1,\n  }),\n  (data, path) => {\n    const $ = new ObjectAssertion(data, path);\n\n    $.noAdditionalProperties(['colspan', 'rowspan']);\n    $.number('colspan', true);\n    $.number('rowspan', true);\n\n    return $.errors;\n  },\n);\n\nconst nodeValidator: Record<Node['nodeType'], NodeAssertion<any>> = {\n  [BLOCKS.DOCUMENT]: assert(TOP_LEVEL_BLOCKS),\n  [BLOCKS.PARAGRAPH]: assertInlineOrText,\n  [BLOCKS.HEADING_1]: assertInlineOrText,\n  [BLOCKS.HEADING_2]: assertInlineOrText,\n  [BLOCKS.HEADING_3]: assertInlineOrText,\n  [BLOCKS.HEADING_4]: assertInlineOrText,\n  [BLOCKS.HEADING_5]: assertInlineOrText,\n  [BLOCKS.HEADING_6]: assertInlineOrText,\n  [BLOCKS.QUOTE]: assert(CONTAINERS[BLOCKS.QUOTE]),\n  [BLOCKS.EMBEDDED_ENTRY]: assertVoidEntryLink,\n  [BLOCKS.EMBEDDED_ASSET]: assertLink('Asset', VOID_CONTENT),\n  [BLOCKS.EMBEDDED_RESOURCE]: assertLink('Contentful:Entry', VOID_CONTENT),\n  [BLOCKS.HR]: assert(VOID_CONTENT),\n  [BLOCKS.OL_LIST]: assertList,\n  [BLOCKS.UL_LIST]: assertList,\n  [BLOCKS.LIST_ITEM]: assert([...LIST_ITEM_BLOCKS].sort()),\n  [BLOCKS.TABLE]: assert(() => ({\n    nodeTypes: [BLOCKS.TABLE_ROW],\n    min: 1,\n  })),\n  [BLOCKS.TABLE_ROW]: assert(() => ({\n    nodeTypes: [BLOCKS.TABLE_CELL, BLOCKS.TABLE_HEADER_CELL],\n    min: 1,\n  })),\n  [BLOCKS.TABLE_CELL]: assertTableCell,\n  [BLOCKS.TABLE_HEADER_CELL]: assertTableCell,\n  [INLINES.HYPERLINK]: new HyperLinkAssertion(),\n  [INLINES.EMBEDDED_ENTRY]: assertVoidEntryLink,\n  [INLINES.EMBEDDED_RESOURCE]: assertLink('Contentful:Entry', VOID_CONTENT),\n  [INLINES.ENTRY_HYPERLINK]: assertLink('Entry', ['text']),\n  [INLINES.ASSET_HYPERLINK]: assertLink('Asset', ['text']),\n  [INLINES.RESOURCE_HYPERLINK]: assertLink('Contentful:Entry', ['text']),\n};\n\nfunction validateNode(node: Node | Text, path: Path): ValidationError[] {\n  if (node.nodeType === 'text') {\n    return assertText(node, path);\n  }\n\n  const errors = nodeValidator[node.nodeType].assert(node, path);\n\n  if (errors.length > 0) {\n    return errors;\n  }\n\n  const $ = new ObjectAssertion(node, path);\n\n  $.each('content', (item, path) => {\n    // We already know those are valid nodes thanks to the assertion done in\n    // the NodeAssertion class\n    return validateNode(item, path);\n  });\n\n  return $.errors;\n}\n\nexport const validateRichTextDocument = (document: Document): ValidationError[] => {\n  const path = new Path();\n  const $ = new ObjectAssertion(document, path);\n\n  if ($.object()) {\n    $.enum('nodeType', [BLOCKS.DOCUMENT]);\n  }\n\n  if ($.errors.length > 0) {\n    return $.errors;\n  }\n\n  return validateNode(document, path);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}