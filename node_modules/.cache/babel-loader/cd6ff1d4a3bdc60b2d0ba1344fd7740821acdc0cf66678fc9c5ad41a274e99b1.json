{"ast":null,"code":"import { encodeCPAResponse } from '@contentful/content-source-maps';\nimport { createRequestConfig, errorHandler } from 'contentful-sdk-core';\nimport pagedSync from './paged-sync.js';\nimport normalizeSearchParameters from './utils/normalize-search-parameters.js';\nimport normalizeSelect from './utils/normalize-select.js';\nimport resolveCircular from './utils/resolve-circular.js';\nimport getQuerySelectionSet from './utils/query-selection-set.js';\nimport validateTimestamp from './utils/validate-timestamp.js';\nimport { validateLocaleParam, validateResolveLinksParam, validateRemoveUnresolvedParam, checkIncludeContentSourceMapsParamIsAllowed } from './utils/validate-params.js';\nimport validateSearchParameters from './utils/validate-search-parameters.js';\n\n/**\r\n * Contentful Delivery API Client. Contains methods which allow access to the\r\n * different kinds of entities present in Contentful (Entries, Assets, etc).\r\n */\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\nclass NotFoundError extends Error {\n  constructor(id, environment, space) {\n    super('The resource could not be found.');\n    this.sys = {\n      type: 'Error',\n      id: 'NotFound'\n    };\n    this.details = {\n      type: 'Entry',\n      id,\n      environment,\n      space\n    };\n  }\n}\nfunction createContentfulApi({\n  http,\n  getGlobalOptions\n}, options) {\n  const notFoundError = (id = 'unknown') => {\n    return new NotFoundError(id, getGlobalOptions().environment, getGlobalOptions().space);\n  };\n  const getBaseUrl = context => {\n    let baseUrl = context === 'space' ? getGlobalOptions().spaceBaseUrl : getGlobalOptions().environmentBaseUrl;\n    if (!baseUrl) {\n      throw new Error('Please define baseUrl for ' + context);\n    }\n    if (!baseUrl.endsWith('/')) {\n      baseUrl += '/';\n    }\n    return baseUrl;\n  };\n  function maybeEnableSourceMaps(query = {}) {\n    var _a, _b;\n    const params = http.httpClientParams;\n    const includeContentSourceMaps = (_a = params === null || params === void 0 ? void 0 : params.includeContentSourceMaps) !== null && _a !== void 0 ? _a : (_b = params === null || params === void 0 ? void 0 : params.alphaFeatures) === null || _b === void 0 ? void 0 : _b.includeContentSourceMaps;\n    const host = params === null || params === void 0 ? void 0 : params.host;\n    const areAllowed = checkIncludeContentSourceMapsParamIsAllowed(host, includeContentSourceMaps);\n    if (areAllowed) {\n      query.includeContentSourceMaps = true;\n      // Ensure that content source maps and required attributes are selected\n      if (query.select) {\n        const selection = getQuerySelectionSet(query);\n        selection.add('sys');\n        query.select = Array.from(selection).join(',');\n      }\n    }\n    return query;\n  }\n  function maybeEncodeCPAResponse(data, config) {\n    var _a;\n    const includeContentSourceMaps = (_a = config === null || config === void 0 ? void 0 : config.params) === null || _a === void 0 ? void 0 : _a.includeContentSourceMaps;\n    if (includeContentSourceMaps) {\n      return encodeCPAResponse(data);\n    }\n    return data;\n  }\n  async function get({\n    context,\n    path,\n    config\n  }) {\n    const baseUrl = getBaseUrl(context);\n    try {\n      const response = await http.get(baseUrl + path, config);\n      return maybeEncodeCPAResponse(response.data, config);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function post({\n    context,\n    path,\n    data,\n    config\n  }) {\n    const baseUrl = getBaseUrl(context);\n    try {\n      const response = await http.post(baseUrl + path, data, config);\n      return response.data;\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function getSpace() {\n    return get({\n      context: 'space',\n      path: ''\n    });\n  }\n  async function getContentType(id) {\n    return get({\n      context: 'environment',\n      path: `content_types/${id}`\n    });\n  }\n  async function getContentTypes(query = {}) {\n    return get({\n      context: 'environment',\n      path: 'content_types',\n      config: createRequestConfig({\n        query\n      })\n    });\n  }\n  async function getEntry(id, query = {}) {\n    return makeGetEntry(id, query, options);\n  }\n  async function getEntries(query = {}) {\n    return makeGetEntries(query, options);\n  }\n  async function makeGetEntry(id, query, options = {\n    withAllLocales: false,\n    withoutLinkResolution: false,\n    withoutUnresolvableLinks: false\n  }) {\n    const {\n      withAllLocales\n    } = options;\n    validateLocaleParam(query, withAllLocales);\n    validateResolveLinksParam(query);\n    validateRemoveUnresolvedParam(query);\n    validateSearchParameters(query);\n    return internalGetEntry(id, withAllLocales ? Object.assign(Object.assign({}, query), {\n      locale: '*'\n    }) : query, options);\n  }\n  async function internalGetEntry(id, query, options) {\n    if (!id) {\n      throw notFoundError(id);\n    }\n    try {\n      const response = await internalGetEntries(Object.assign({\n        'sys.id': id\n      }, maybeEnableSourceMaps(query)), options);\n      if (response.items.length > 0) {\n        return response.items[0];\n      } else {\n        throw notFoundError(id);\n      }\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function makeGetEntries(query, options = {\n    withAllLocales: false,\n    withoutLinkResolution: false,\n    withoutUnresolvableLinks: false\n  }) {\n    const {\n      withAllLocales\n    } = options;\n    validateLocaleParam(query, withAllLocales);\n    validateResolveLinksParam(query);\n    validateRemoveUnresolvedParam(query);\n    validateSearchParameters(query);\n    return internalGetEntries(withAllLocales ? Object.assign(Object.assign({}, query), {\n      locale: '*'\n    }) : query, options);\n  }\n  async function internalGetEntries(query, options) {\n    const {\n      withoutLinkResolution,\n      withoutUnresolvableLinks\n    } = options;\n    try {\n      const entries = await get({\n        context: 'environment',\n        path: 'entries',\n        config: createRequestConfig({\n          query: maybeEnableSourceMaps(normalizeSearchParameters(normalizeSelect(query)))\n        })\n      });\n      return resolveCircular(entries, {\n        resolveLinks: !withoutLinkResolution,\n        removeUnresolved: withoutUnresolvableLinks !== null && withoutUnresolvableLinks !== void 0 ? withoutUnresolvableLinks : false\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function getAsset(id, query = {}) {\n    return makeGetAsset(id, query, options);\n  }\n  async function getAssets(query = {}) {\n    return makeGetAssets(query, options);\n  }\n  async function makeGetAssets(query, options = {\n    withAllLocales: false,\n    withoutLinkResolution: false,\n    withoutUnresolvableLinks: false\n  }) {\n    const {\n      withAllLocales\n    } = options;\n    validateLocaleParam(query, withAllLocales);\n    validateSearchParameters(query);\n    const localeSpecificQuery = withAllLocales ? Object.assign(Object.assign({}, query), {\n      locale: '*'\n    }) : query;\n    return internalGetAssets(localeSpecificQuery);\n  }\n  async function internalGetAsset(id, query) {\n    try {\n      return get({\n        context: 'environment',\n        path: `assets/${id}`,\n        config: createRequestConfig({\n          query: maybeEnableSourceMaps(normalizeSelect(query))\n        })\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function makeGetAsset(id, query, options = {\n    withAllLocales: false,\n    withoutLinkResolution: false,\n    withoutUnresolvableLinks: false\n  }) {\n    const {\n      withAllLocales\n    } = options;\n    validateLocaleParam(query, withAllLocales);\n    validateSearchParameters(query);\n    const localeSpecificQuery = withAllLocales ? Object.assign(Object.assign({}, query), {\n      locale: '*'\n    }) : query;\n    return internalGetAsset(id, localeSpecificQuery);\n  }\n  async function internalGetAssets(query) {\n    try {\n      return get({\n        context: 'environment',\n        path: 'assets',\n        config: createRequestConfig({\n          query: maybeEnableSourceMaps(normalizeSearchParameters(normalizeSelect(query)))\n        })\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  async function getTag(id) {\n    return get({\n      context: 'environment',\n      path: `tags/${id}`\n    });\n  }\n  async function getTags(query = {}) {\n    validateSearchParameters(query);\n    return get({\n      context: 'environment',\n      path: 'tags',\n      config: createRequestConfig({\n        query: normalizeSearchParameters(normalizeSelect(query))\n      })\n    });\n  }\n  async function createAssetKey(expiresAt) {\n    try {\n      const now = Math.floor(Date.now() / 1000);\n      const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n      validateTimestamp('expiresAt', expiresAt, {\n        maximum: currentMaxLifetime,\n        now\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n    return post({\n      context: 'environment',\n      path: 'asset_keys',\n      data: {\n        expiresAt\n      }\n    });\n  }\n  async function getLocales(query = {}) {\n    validateSearchParameters(query);\n    return get({\n      context: 'environment',\n      path: 'locales',\n      config: createRequestConfig({\n        query: normalizeSelect(query)\n      })\n    });\n  }\n  async function sync(query, syncOptions = {\n    paginate: true\n  }) {\n    return makePagedSync(query, syncOptions, options);\n  }\n  async function makePagedSync(query, syncOptions, options = {\n    withAllLocales: false,\n    withoutLinkResolution: false,\n    withoutUnresolvableLinks: false\n  }) {\n    validateResolveLinksParam(query);\n    validateRemoveUnresolvedParam(query);\n    const combinedOptions = Object.assign(Object.assign({}, syncOptions), options);\n    switchToEnvironment(http);\n    return pagedSync(http, query, combinedOptions);\n  }\n  function parseEntries(data) {\n    return makeParseEntries(data, options);\n  }\n  function makeParseEntries(data, options = {\n    withAllLocales: false,\n    withoutLinkResolution: false,\n    withoutUnresolvableLinks: false\n  }) {\n    return internalParseEntries(data, options);\n  }\n  function internalParseEntries(data, options) {\n    const {\n      withoutLinkResolution,\n      withoutUnresolvableLinks\n    } = options;\n    return resolveCircular(data, {\n      resolveLinks: !withoutLinkResolution,\n      removeUnresolved: withoutUnresolvableLinks !== null && withoutUnresolvableLinks !== void 0 ? withoutUnresolvableLinks : false\n    });\n  }\n  /*\r\n   * Switches BaseURL to use /environments path\r\n   * */\n  function switchToEnvironment(http) {\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n  }\n  return {\n    version: \"11.1.3\",\n    getSpace,\n    getContentType,\n    getContentTypes,\n    getAsset,\n    getAssets,\n    getTag,\n    getTags,\n    getLocales,\n    parseEntries,\n    sync,\n    getEntry,\n    getEntries,\n    createAssetKey\n  };\n}\nexport { createContentfulApi as default };","map":{"version":3,"names":["encodeCPAResponse","createRequestConfig","errorHandler","pagedSync","normalizeSearchParameters","normalizeSelect","resolveCircular","getQuerySelectionSet","validateTimestamp","validateLocaleParam","validateResolveLinksParam","validateRemoveUnresolvedParam","checkIncludeContentSourceMapsParamIsAllowed","validateSearchParameters","ASSET_KEY_MAX_LIFETIME","NotFoundError","Error","constructor","id","environment","space","sys","type","details","createContentfulApi","http","getGlobalOptions","options","notFoundError","getBaseUrl","context","baseUrl","spaceBaseUrl","environmentBaseUrl","endsWith","maybeEnableSourceMaps","query","_a","_b","params","httpClientParams","includeContentSourceMaps","alphaFeatures","host","areAllowed","select","selection","add","Array","from","join","maybeEncodeCPAResponse","data","config","get","path","response","error","post","getSpace","getContentType","getContentTypes","getEntry","makeGetEntry","getEntries","makeGetEntries","withAllLocales","withoutLinkResolution","withoutUnresolvableLinks","internalGetEntry","Object","assign","locale","internalGetEntries","items","length","entries","resolveLinks","removeUnresolved","getAsset","makeGetAsset","getAssets","makeGetAssets","localeSpecificQuery","internalGetAssets","internalGetAsset","getTag","getTags","createAssetKey","expiresAt","now","Math","floor","Date","currentMaxLifetime","maximum","getLocales","sync","syncOptions","paginate","makePagedSync","combinedOptions","switchToEnvironment","parseEntries","makeParseEntries","internalParseEntries","defaults","baseURL","version","default"],"sources":["C:/Users/ainge/OneDrive/Documents/GitHub/mr-ingerson-blog/node_modules/contentful/dist/esm/create-contentful-api.js"],"sourcesContent":["import { encodeCPAResponse } from '@contentful/content-source-maps';\r\nimport { createRequestConfig, errorHandler } from 'contentful-sdk-core';\r\nimport pagedSync from './paged-sync.js';\r\nimport normalizeSearchParameters from './utils/normalize-search-parameters.js';\r\nimport normalizeSelect from './utils/normalize-select.js';\r\nimport resolveCircular from './utils/resolve-circular.js';\r\nimport getQuerySelectionSet from './utils/query-selection-set.js';\r\nimport validateTimestamp from './utils/validate-timestamp.js';\r\nimport { validateLocaleParam, validateResolveLinksParam, validateRemoveUnresolvedParam, checkIncludeContentSourceMapsParamIsAllowed } from './utils/validate-params.js';\r\nimport validateSearchParameters from './utils/validate-search-parameters.js';\r\n\r\n/**\r\n * Contentful Delivery API Client. Contains methods which allow access to the\r\n * different kinds of entities present in Contentful (Entries, Assets, etc).\r\n */\r\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\r\nclass NotFoundError extends Error {\r\n    constructor(id, environment, space) {\r\n        super('The resource could not be found.');\r\n        this.sys = {\r\n            type: 'Error',\r\n            id: 'NotFound',\r\n        };\r\n        this.details = {\r\n            type: 'Entry',\r\n            id,\r\n            environment,\r\n            space,\r\n        };\r\n    }\r\n}\r\nfunction createContentfulApi({ http, getGlobalOptions }, options) {\r\n    const notFoundError = (id = 'unknown') => {\r\n        return new NotFoundError(id, getGlobalOptions().environment, getGlobalOptions().space);\r\n    };\r\n    const getBaseUrl = (context) => {\r\n        let baseUrl = context === 'space' ? getGlobalOptions().spaceBaseUrl : getGlobalOptions().environmentBaseUrl;\r\n        if (!baseUrl) {\r\n            throw new Error('Please define baseUrl for ' + context);\r\n        }\r\n        if (!baseUrl.endsWith('/')) {\r\n            baseUrl += '/';\r\n        }\r\n        return baseUrl;\r\n    };\r\n    function maybeEnableSourceMaps(query = {}) {\r\n        var _a, _b;\r\n        const params = http.httpClientParams;\r\n        const includeContentSourceMaps = (_a = params === null || params === void 0 ? void 0 : params.includeContentSourceMaps) !== null && _a !== void 0 ? _a : (_b = params === null || params === void 0 ? void 0 : params.alphaFeatures) === null || _b === void 0 ? void 0 : _b.includeContentSourceMaps;\r\n        const host = params === null || params === void 0 ? void 0 : params.host;\r\n        const areAllowed = checkIncludeContentSourceMapsParamIsAllowed(host, includeContentSourceMaps);\r\n        if (areAllowed) {\r\n            query.includeContentSourceMaps = true;\r\n            // Ensure that content source maps and required attributes are selected\r\n            if (query.select) {\r\n                const selection = getQuerySelectionSet(query);\r\n                selection.add('sys');\r\n                query.select = Array.from(selection).join(',');\r\n            }\r\n        }\r\n        return query;\r\n    }\r\n    function maybeEncodeCPAResponse(data, config) {\r\n        var _a;\r\n        const includeContentSourceMaps = (_a = config === null || config === void 0 ? void 0 : config.params) === null || _a === void 0 ? void 0 : _a.includeContentSourceMaps;\r\n        if (includeContentSourceMaps) {\r\n            return encodeCPAResponse(data);\r\n        }\r\n        return data;\r\n    }\r\n    async function get({ context, path, config }) {\r\n        const baseUrl = getBaseUrl(context);\r\n        try {\r\n            const response = await http.get(baseUrl + path, config);\r\n            return maybeEncodeCPAResponse(response.data, config);\r\n        }\r\n        catch (error) {\r\n            errorHandler(error);\r\n        }\r\n    }\r\n    async function post({ context, path, data, config }) {\r\n        const baseUrl = getBaseUrl(context);\r\n        try {\r\n            const response = await http.post(baseUrl + path, data, config);\r\n            return response.data;\r\n        }\r\n        catch (error) {\r\n            errorHandler(error);\r\n        }\r\n    }\r\n    async function getSpace() {\r\n        return get({ context: 'space', path: '' });\r\n    }\r\n    async function getContentType(id) {\r\n        return get({\r\n            context: 'environment',\r\n            path: `content_types/${id}`,\r\n        });\r\n    }\r\n    async function getContentTypes(query = {}) {\r\n        return get({\r\n            context: 'environment',\r\n            path: 'content_types',\r\n            config: createRequestConfig({ query }),\r\n        });\r\n    }\r\n    async function getEntry(id, query = {}) {\r\n        return makeGetEntry(id, query, options);\r\n    }\r\n    async function getEntries(query = {}) {\r\n        return makeGetEntries(query, options);\r\n    }\r\n    async function makeGetEntry(id, query, options = {\r\n        withAllLocales: false,\r\n        withoutLinkResolution: false,\r\n        withoutUnresolvableLinks: false,\r\n    }) {\r\n        const { withAllLocales } = options;\r\n        validateLocaleParam(query, withAllLocales);\r\n        validateResolveLinksParam(query);\r\n        validateRemoveUnresolvedParam(query);\r\n        validateSearchParameters(query);\r\n        return internalGetEntry(id, withAllLocales ? Object.assign(Object.assign({}, query), { locale: '*' }) : query, options);\r\n    }\r\n    async function internalGetEntry(id, query, options) {\r\n        if (!id) {\r\n            throw notFoundError(id);\r\n        }\r\n        try {\r\n            const response = await internalGetEntries(Object.assign({ 'sys.id': id }, maybeEnableSourceMaps(query)), options);\r\n            if (response.items.length > 0) {\r\n                return response.items[0];\r\n            }\r\n            else {\r\n                throw notFoundError(id);\r\n            }\r\n        }\r\n        catch (error) {\r\n            errorHandler(error);\r\n        }\r\n    }\r\n    async function makeGetEntries(query, options = {\r\n        withAllLocales: false,\r\n        withoutLinkResolution: false,\r\n        withoutUnresolvableLinks: false,\r\n    }) {\r\n        const { withAllLocales } = options;\r\n        validateLocaleParam(query, withAllLocales);\r\n        validateResolveLinksParam(query);\r\n        validateRemoveUnresolvedParam(query);\r\n        validateSearchParameters(query);\r\n        return internalGetEntries(withAllLocales\r\n            ? Object.assign(Object.assign({}, query), { locale: '*' }) : query, options);\r\n    }\r\n    async function internalGetEntries(query, options) {\r\n        const { withoutLinkResolution, withoutUnresolvableLinks } = options;\r\n        try {\r\n            const entries = await get({\r\n                context: 'environment',\r\n                path: 'entries',\r\n                config: createRequestConfig({\r\n                    query: maybeEnableSourceMaps(normalizeSearchParameters(normalizeSelect(query))),\r\n                }),\r\n            });\r\n            return resolveCircular(entries, {\r\n                resolveLinks: !withoutLinkResolution,\r\n                removeUnresolved: withoutUnresolvableLinks !== null && withoutUnresolvableLinks !== void 0 ? withoutUnresolvableLinks : false,\r\n            });\r\n        }\r\n        catch (error) {\r\n            errorHandler(error);\r\n        }\r\n    }\r\n    async function getAsset(id, query = {}) {\r\n        return makeGetAsset(id, query, options);\r\n    }\r\n    async function getAssets(query = {}) {\r\n        return makeGetAssets(query, options);\r\n    }\r\n    async function makeGetAssets(query, options = {\r\n        withAllLocales: false,\r\n        withoutLinkResolution: false,\r\n        withoutUnresolvableLinks: false,\r\n    }) {\r\n        const { withAllLocales } = options;\r\n        validateLocaleParam(query, withAllLocales);\r\n        validateSearchParameters(query);\r\n        const localeSpecificQuery = withAllLocales ? Object.assign(Object.assign({}, query), { locale: '*' }) : query;\r\n        return internalGetAssets(localeSpecificQuery);\r\n    }\r\n    async function internalGetAsset(id, query) {\r\n        try {\r\n            return get({\r\n                context: 'environment',\r\n                path: `assets/${id}`,\r\n                config: createRequestConfig({ query: maybeEnableSourceMaps(normalizeSelect(query)) }),\r\n            });\r\n        }\r\n        catch (error) {\r\n            errorHandler(error);\r\n        }\r\n    }\r\n    async function makeGetAsset(id, query, options = {\r\n        withAllLocales: false,\r\n        withoutLinkResolution: false,\r\n        withoutUnresolvableLinks: false,\r\n    }) {\r\n        const { withAllLocales } = options;\r\n        validateLocaleParam(query, withAllLocales);\r\n        validateSearchParameters(query);\r\n        const localeSpecificQuery = withAllLocales ? Object.assign(Object.assign({}, query), { locale: '*' }) : query;\r\n        return internalGetAsset(id, localeSpecificQuery);\r\n    }\r\n    async function internalGetAssets(query) {\r\n        try {\r\n            return get({\r\n                context: 'environment',\r\n                path: 'assets',\r\n                config: createRequestConfig({\r\n                    query: maybeEnableSourceMaps(normalizeSearchParameters(normalizeSelect(query))),\r\n                }),\r\n            });\r\n        }\r\n        catch (error) {\r\n            errorHandler(error);\r\n        }\r\n    }\r\n    async function getTag(id) {\r\n        return get({\r\n            context: 'environment',\r\n            path: `tags/${id}`,\r\n        });\r\n    }\r\n    async function getTags(query = {}) {\r\n        validateSearchParameters(query);\r\n        return get({\r\n            context: 'environment',\r\n            path: 'tags',\r\n            config: createRequestConfig({ query: normalizeSearchParameters(normalizeSelect(query)) }),\r\n        });\r\n    }\r\n    async function createAssetKey(expiresAt) {\r\n        try {\r\n            const now = Math.floor(Date.now() / 1000);\r\n            const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\r\n            validateTimestamp('expiresAt', expiresAt, { maximum: currentMaxLifetime, now });\r\n        }\r\n        catch (error) {\r\n            errorHandler(error);\r\n        }\r\n        return post({\r\n            context: 'environment',\r\n            path: 'asset_keys',\r\n            data: { expiresAt },\r\n        });\r\n    }\r\n    async function getLocales(query = {}) {\r\n        validateSearchParameters(query);\r\n        return get({\r\n            context: 'environment',\r\n            path: 'locales',\r\n            config: createRequestConfig({ query: normalizeSelect(query) }),\r\n        });\r\n    }\r\n    async function sync(query, syncOptions = { paginate: true }) {\r\n        return makePagedSync(query, syncOptions, options);\r\n    }\r\n    async function makePagedSync(query, syncOptions, options = {\r\n        withAllLocales: false,\r\n        withoutLinkResolution: false,\r\n        withoutUnresolvableLinks: false,\r\n    }) {\r\n        validateResolveLinksParam(query);\r\n        validateRemoveUnresolvedParam(query);\r\n        const combinedOptions = Object.assign(Object.assign({}, syncOptions), options);\r\n        switchToEnvironment(http);\r\n        return pagedSync(http, query, combinedOptions);\r\n    }\r\n    function parseEntries(data) {\r\n        return makeParseEntries(data, options);\r\n    }\r\n    function makeParseEntries(data, options = {\r\n        withAllLocales: false,\r\n        withoutLinkResolution: false,\r\n        withoutUnresolvableLinks: false,\r\n    }) {\r\n        return internalParseEntries(data, options);\r\n    }\r\n    function internalParseEntries(data, options) {\r\n        const { withoutLinkResolution, withoutUnresolvableLinks } = options;\r\n        return resolveCircular(data, {\r\n            resolveLinks: !withoutLinkResolution,\r\n            removeUnresolved: withoutUnresolvableLinks !== null && withoutUnresolvableLinks !== void 0 ? withoutUnresolvableLinks : false,\r\n        });\r\n    }\r\n    /*\r\n     * Switches BaseURL to use /environments path\r\n     * */\r\n    function switchToEnvironment(http) {\r\n        http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\r\n    }\r\n    return {\r\n        version: \"11.1.3\",\r\n        getSpace,\r\n        getContentType,\r\n        getContentTypes,\r\n        getAsset,\r\n        getAssets,\r\n        getTag,\r\n        getTags,\r\n        getLocales,\r\n        parseEntries,\r\n        sync,\r\n        getEntry,\r\n        getEntries,\r\n        createAssetKey,\r\n    };\r\n}\r\n\r\nexport { createContentfulApi as default };\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,iCAAiC;AACnE,SAASC,mBAAmB,EAAEC,YAAY,QAAQ,qBAAqB;AACvE,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,yBAAyB,MAAM,wCAAwC;AAC9E,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,oBAAoB,MAAM,gCAAgC;AACjE,OAAOC,iBAAiB,MAAM,+BAA+B;AAC7D,SAASC,mBAAmB,EAAEC,yBAAyB,EAAEC,6BAA6B,EAAEC,2CAA2C,QAAQ,4BAA4B;AACvK,OAAOC,wBAAwB,MAAM,uCAAuC;;AAE5E;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AAC3C,MAAMC,aAAa,SAASC,KAAK,CAAC;EAC9BC,WAAWA,CAACC,EAAE,EAAEC,WAAW,EAAEC,KAAK,EAAE;IAChC,KAAK,CAAC,kCAAkC,CAAC;IACzC,IAAI,CAACC,GAAG,GAAG;MACPC,IAAI,EAAE,OAAO;MACbJ,EAAE,EAAE;IACR,CAAC;IACD,IAAI,CAACK,OAAO,GAAG;MACXD,IAAI,EAAE,OAAO;MACbJ,EAAE;MACFC,WAAW;MACXC;IACJ,CAAC;EACL;AACJ;AACA,SAASI,mBAAmBA,CAAC;EAAEC,IAAI;EAAEC;AAAiB,CAAC,EAAEC,OAAO,EAAE;EAC9D,MAAMC,aAAa,GAAGA,CAACV,EAAE,GAAG,SAAS,KAAK;IACtC,OAAO,IAAIH,aAAa,CAACG,EAAE,EAAEQ,gBAAgB,CAAC,CAAC,CAACP,WAAW,EAAEO,gBAAgB,CAAC,CAAC,CAACN,KAAK,CAAC;EAC1F,CAAC;EACD,MAAMS,UAAU,GAAIC,OAAO,IAAK;IAC5B,IAAIC,OAAO,GAAGD,OAAO,KAAK,OAAO,GAAGJ,gBAAgB,CAAC,CAAC,CAACM,YAAY,GAAGN,gBAAgB,CAAC,CAAC,CAACO,kBAAkB;IAC3G,IAAI,CAACF,OAAO,EAAE;MACV,MAAM,IAAIf,KAAK,CAAC,4BAA4B,GAAGc,OAAO,CAAC;IAC3D;IACA,IAAI,CAACC,OAAO,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MACxBH,OAAO,IAAI,GAAG;IAClB;IACA,OAAOA,OAAO;EAClB,CAAC;EACD,SAASI,qBAAqBA,CAACC,KAAK,GAAG,CAAC,CAAC,EAAE;IACvC,IAAIC,EAAE,EAAEC,EAAE;IACV,MAAMC,MAAM,GAAGd,IAAI,CAACe,gBAAgB;IACpC,MAAMC,wBAAwB,GAAG,CAACJ,EAAE,GAAGE,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACE,wBAAwB,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAACC,EAAE,GAAGC,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACG,aAAa,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACG,wBAAwB;IACrS,MAAME,IAAI,GAAGJ,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACI,IAAI;IACxE,MAAMC,UAAU,GAAGhC,2CAA2C,CAAC+B,IAAI,EAAEF,wBAAwB,CAAC;IAC9F,IAAIG,UAAU,EAAE;MACZR,KAAK,CAACK,wBAAwB,GAAG,IAAI;MACrC;MACA,IAAIL,KAAK,CAACS,MAAM,EAAE;QACd,MAAMC,SAAS,GAAGvC,oBAAoB,CAAC6B,KAAK,CAAC;QAC7CU,SAAS,CAACC,GAAG,CAAC,KAAK,CAAC;QACpBX,KAAK,CAACS,MAAM,GAAGG,KAAK,CAACC,IAAI,CAACH,SAAS,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC;MAClD;IACJ;IACA,OAAOd,KAAK;EAChB;EACA,SAASe,sBAAsBA,CAACC,IAAI,EAAEC,MAAM,EAAE;IAC1C,IAAIhB,EAAE;IACN,MAAMI,wBAAwB,GAAG,CAACJ,EAAE,GAAGgB,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACd,MAAM,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,wBAAwB;IACtK,IAAIA,wBAAwB,EAAE;MAC1B,OAAOzC,iBAAiB,CAACoD,IAAI,CAAC;IAClC;IACA,OAAOA,IAAI;EACf;EACA,eAAeE,GAAGA,CAAC;IAAExB,OAAO;IAAEyB,IAAI;IAAEF;EAAO,CAAC,EAAE;IAC1C,MAAMtB,OAAO,GAAGF,UAAU,CAACC,OAAO,CAAC;IACnC,IAAI;MACA,MAAM0B,QAAQ,GAAG,MAAM/B,IAAI,CAAC6B,GAAG,CAACvB,OAAO,GAAGwB,IAAI,EAAEF,MAAM,CAAC;MACvD,OAAOF,sBAAsB,CAACK,QAAQ,CAACJ,IAAI,EAAEC,MAAM,CAAC;IACxD,CAAC,CACD,OAAOI,KAAK,EAAE;MACVvD,YAAY,CAACuD,KAAK,CAAC;IACvB;EACJ;EACA,eAAeC,IAAIA,CAAC;IAAE5B,OAAO;IAAEyB,IAAI;IAAEH,IAAI;IAAEC;EAAO,CAAC,EAAE;IACjD,MAAMtB,OAAO,GAAGF,UAAU,CAACC,OAAO,CAAC;IACnC,IAAI;MACA,MAAM0B,QAAQ,GAAG,MAAM/B,IAAI,CAACiC,IAAI,CAAC3B,OAAO,GAAGwB,IAAI,EAAEH,IAAI,EAAEC,MAAM,CAAC;MAC9D,OAAOG,QAAQ,CAACJ,IAAI;IACxB,CAAC,CACD,OAAOK,KAAK,EAAE;MACVvD,YAAY,CAACuD,KAAK,CAAC;IACvB;EACJ;EACA,eAAeE,QAAQA,CAAA,EAAG;IACtB,OAAOL,GAAG,CAAC;MAAExB,OAAO,EAAE,OAAO;MAAEyB,IAAI,EAAE;IAAG,CAAC,CAAC;EAC9C;EACA,eAAeK,cAAcA,CAAC1C,EAAE,EAAE;IAC9B,OAAOoC,GAAG,CAAC;MACPxB,OAAO,EAAE,aAAa;MACtByB,IAAI,EAAE,iBAAiBrC,EAAE;IAC7B,CAAC,CAAC;EACN;EACA,eAAe2C,eAAeA,CAACzB,KAAK,GAAG,CAAC,CAAC,EAAE;IACvC,OAAOkB,GAAG,CAAC;MACPxB,OAAO,EAAE,aAAa;MACtByB,IAAI,EAAE,eAAe;MACrBF,MAAM,EAAEpD,mBAAmB,CAAC;QAAEmC;MAAM,CAAC;IACzC,CAAC,CAAC;EACN;EACA,eAAe0B,QAAQA,CAAC5C,EAAE,EAAEkB,KAAK,GAAG,CAAC,CAAC,EAAE;IACpC,OAAO2B,YAAY,CAAC7C,EAAE,EAAEkB,KAAK,EAAET,OAAO,CAAC;EAC3C;EACA,eAAeqC,UAAUA,CAAC5B,KAAK,GAAG,CAAC,CAAC,EAAE;IAClC,OAAO6B,cAAc,CAAC7B,KAAK,EAAET,OAAO,CAAC;EACzC;EACA,eAAeoC,YAAYA,CAAC7C,EAAE,EAAEkB,KAAK,EAAET,OAAO,GAAG;IAC7CuC,cAAc,EAAE,KAAK;IACrBC,qBAAqB,EAAE,KAAK;IAC5BC,wBAAwB,EAAE;EAC9B,CAAC,EAAE;IACC,MAAM;MAAEF;IAAe,CAAC,GAAGvC,OAAO;IAClClB,mBAAmB,CAAC2B,KAAK,EAAE8B,cAAc,CAAC;IAC1CxD,yBAAyB,CAAC0B,KAAK,CAAC;IAChCzB,6BAA6B,CAACyB,KAAK,CAAC;IACpCvB,wBAAwB,CAACuB,KAAK,CAAC;IAC/B,OAAOiC,gBAAgB,CAACnD,EAAE,EAAEgD,cAAc,GAAGI,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEnC,KAAK,CAAC,EAAE;MAAEoC,MAAM,EAAE;IAAI,CAAC,CAAC,GAAGpC,KAAK,EAAET,OAAO,CAAC;EAC3H;EACA,eAAe0C,gBAAgBA,CAACnD,EAAE,EAAEkB,KAAK,EAAET,OAAO,EAAE;IAChD,IAAI,CAACT,EAAE,EAAE;MACL,MAAMU,aAAa,CAACV,EAAE,CAAC;IAC3B;IACA,IAAI;MACA,MAAMsC,QAAQ,GAAG,MAAMiB,kBAAkB,CAACH,MAAM,CAACC,MAAM,CAAC;QAAE,QAAQ,EAAErD;MAAG,CAAC,EAAEiB,qBAAqB,CAACC,KAAK,CAAC,CAAC,EAAET,OAAO,CAAC;MACjH,IAAI6B,QAAQ,CAACkB,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;QAC3B,OAAOnB,QAAQ,CAACkB,KAAK,CAAC,CAAC,CAAC;MAC5B,CAAC,MACI;QACD,MAAM9C,aAAa,CAACV,EAAE,CAAC;MAC3B;IACJ,CAAC,CACD,OAAOuC,KAAK,EAAE;MACVvD,YAAY,CAACuD,KAAK,CAAC;IACvB;EACJ;EACA,eAAeQ,cAAcA,CAAC7B,KAAK,EAAET,OAAO,GAAG;IAC3CuC,cAAc,EAAE,KAAK;IACrBC,qBAAqB,EAAE,KAAK;IAC5BC,wBAAwB,EAAE;EAC9B,CAAC,EAAE;IACC,MAAM;MAAEF;IAAe,CAAC,GAAGvC,OAAO;IAClClB,mBAAmB,CAAC2B,KAAK,EAAE8B,cAAc,CAAC;IAC1CxD,yBAAyB,CAAC0B,KAAK,CAAC;IAChCzB,6BAA6B,CAACyB,KAAK,CAAC;IACpCvB,wBAAwB,CAACuB,KAAK,CAAC;IAC/B,OAAOqC,kBAAkB,CAACP,cAAc,GAClCI,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEnC,KAAK,CAAC,EAAE;MAAEoC,MAAM,EAAE;IAAI,CAAC,CAAC,GAAGpC,KAAK,EAAET,OAAO,CAAC;EACpF;EACA,eAAe8C,kBAAkBA,CAACrC,KAAK,EAAET,OAAO,EAAE;IAC9C,MAAM;MAAEwC,qBAAqB;MAAEC;IAAyB,CAAC,GAAGzC,OAAO;IACnE,IAAI;MACA,MAAMiD,OAAO,GAAG,MAAMtB,GAAG,CAAC;QACtBxB,OAAO,EAAE,aAAa;QACtByB,IAAI,EAAE,SAAS;QACfF,MAAM,EAAEpD,mBAAmB,CAAC;UACxBmC,KAAK,EAAED,qBAAqB,CAAC/B,yBAAyB,CAACC,eAAe,CAAC+B,KAAK,CAAC,CAAC;QAClF,CAAC;MACL,CAAC,CAAC;MACF,OAAO9B,eAAe,CAACsE,OAAO,EAAE;QAC5BC,YAAY,EAAE,CAACV,qBAAqB;QACpCW,gBAAgB,EAAEV,wBAAwB,KAAK,IAAI,IAAIA,wBAAwB,KAAK,KAAK,CAAC,GAAGA,wBAAwB,GAAG;MAC5H,CAAC,CAAC;IACN,CAAC,CACD,OAAOX,KAAK,EAAE;MACVvD,YAAY,CAACuD,KAAK,CAAC;IACvB;EACJ;EACA,eAAesB,QAAQA,CAAC7D,EAAE,EAAEkB,KAAK,GAAG,CAAC,CAAC,EAAE;IACpC,OAAO4C,YAAY,CAAC9D,EAAE,EAAEkB,KAAK,EAAET,OAAO,CAAC;EAC3C;EACA,eAAesD,SAASA,CAAC7C,KAAK,GAAG,CAAC,CAAC,EAAE;IACjC,OAAO8C,aAAa,CAAC9C,KAAK,EAAET,OAAO,CAAC;EACxC;EACA,eAAeuD,aAAaA,CAAC9C,KAAK,EAAET,OAAO,GAAG;IAC1CuC,cAAc,EAAE,KAAK;IACrBC,qBAAqB,EAAE,KAAK;IAC5BC,wBAAwB,EAAE;EAC9B,CAAC,EAAE;IACC,MAAM;MAAEF;IAAe,CAAC,GAAGvC,OAAO;IAClClB,mBAAmB,CAAC2B,KAAK,EAAE8B,cAAc,CAAC;IAC1CrD,wBAAwB,CAACuB,KAAK,CAAC;IAC/B,MAAM+C,mBAAmB,GAAGjB,cAAc,GAAGI,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEnC,KAAK,CAAC,EAAE;MAAEoC,MAAM,EAAE;IAAI,CAAC,CAAC,GAAGpC,KAAK;IAC7G,OAAOgD,iBAAiB,CAACD,mBAAmB,CAAC;EACjD;EACA,eAAeE,gBAAgBA,CAACnE,EAAE,EAAEkB,KAAK,EAAE;IACvC,IAAI;MACA,OAAOkB,GAAG,CAAC;QACPxB,OAAO,EAAE,aAAa;QACtByB,IAAI,EAAE,UAAUrC,EAAE,EAAE;QACpBmC,MAAM,EAAEpD,mBAAmB,CAAC;UAAEmC,KAAK,EAAED,qBAAqB,CAAC9B,eAAe,CAAC+B,KAAK,CAAC;QAAE,CAAC;MACxF,CAAC,CAAC;IACN,CAAC,CACD,OAAOqB,KAAK,EAAE;MACVvD,YAAY,CAACuD,KAAK,CAAC;IACvB;EACJ;EACA,eAAeuB,YAAYA,CAAC9D,EAAE,EAAEkB,KAAK,EAAET,OAAO,GAAG;IAC7CuC,cAAc,EAAE,KAAK;IACrBC,qBAAqB,EAAE,KAAK;IAC5BC,wBAAwB,EAAE;EAC9B,CAAC,EAAE;IACC,MAAM;MAAEF;IAAe,CAAC,GAAGvC,OAAO;IAClClB,mBAAmB,CAAC2B,KAAK,EAAE8B,cAAc,CAAC;IAC1CrD,wBAAwB,CAACuB,KAAK,CAAC;IAC/B,MAAM+C,mBAAmB,GAAGjB,cAAc,GAAGI,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEnC,KAAK,CAAC,EAAE;MAAEoC,MAAM,EAAE;IAAI,CAAC,CAAC,GAAGpC,KAAK;IAC7G,OAAOiD,gBAAgB,CAACnE,EAAE,EAAEiE,mBAAmB,CAAC;EACpD;EACA,eAAeC,iBAAiBA,CAAChD,KAAK,EAAE;IACpC,IAAI;MACA,OAAOkB,GAAG,CAAC;QACPxB,OAAO,EAAE,aAAa;QACtByB,IAAI,EAAE,QAAQ;QACdF,MAAM,EAAEpD,mBAAmB,CAAC;UACxBmC,KAAK,EAAED,qBAAqB,CAAC/B,yBAAyB,CAACC,eAAe,CAAC+B,KAAK,CAAC,CAAC;QAClF,CAAC;MACL,CAAC,CAAC;IACN,CAAC,CACD,OAAOqB,KAAK,EAAE;MACVvD,YAAY,CAACuD,KAAK,CAAC;IACvB;EACJ;EACA,eAAe6B,MAAMA,CAACpE,EAAE,EAAE;IACtB,OAAOoC,GAAG,CAAC;MACPxB,OAAO,EAAE,aAAa;MACtByB,IAAI,EAAE,QAAQrC,EAAE;IACpB,CAAC,CAAC;EACN;EACA,eAAeqE,OAAOA,CAACnD,KAAK,GAAG,CAAC,CAAC,EAAE;IAC/BvB,wBAAwB,CAACuB,KAAK,CAAC;IAC/B,OAAOkB,GAAG,CAAC;MACPxB,OAAO,EAAE,aAAa;MACtByB,IAAI,EAAE,MAAM;MACZF,MAAM,EAAEpD,mBAAmB,CAAC;QAAEmC,KAAK,EAAEhC,yBAAyB,CAACC,eAAe,CAAC+B,KAAK,CAAC;MAAE,CAAC;IAC5F,CAAC,CAAC;EACN;EACA,eAAeoD,cAAcA,CAACC,SAAS,EAAE;IACrC,IAAI;MACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACH,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;MACzC,MAAMI,kBAAkB,GAAGJ,GAAG,GAAG5E,sBAAsB;MACvDN,iBAAiB,CAAC,WAAW,EAAEiF,SAAS,EAAE;QAAEM,OAAO,EAAED,kBAAkB;QAAEJ;MAAI,CAAC,CAAC;IACnF,CAAC,CACD,OAAOjC,KAAK,EAAE;MACVvD,YAAY,CAACuD,KAAK,CAAC;IACvB;IACA,OAAOC,IAAI,CAAC;MACR5B,OAAO,EAAE,aAAa;MACtByB,IAAI,EAAE,YAAY;MAClBH,IAAI,EAAE;QAAEqC;MAAU;IACtB,CAAC,CAAC;EACN;EACA,eAAeO,UAAUA,CAAC5D,KAAK,GAAG,CAAC,CAAC,EAAE;IAClCvB,wBAAwB,CAACuB,KAAK,CAAC;IAC/B,OAAOkB,GAAG,CAAC;MACPxB,OAAO,EAAE,aAAa;MACtByB,IAAI,EAAE,SAAS;MACfF,MAAM,EAAEpD,mBAAmB,CAAC;QAAEmC,KAAK,EAAE/B,eAAe,CAAC+B,KAAK;MAAE,CAAC;IACjE,CAAC,CAAC;EACN;EACA,eAAe6D,IAAIA,CAAC7D,KAAK,EAAE8D,WAAW,GAAG;IAAEC,QAAQ,EAAE;EAAK,CAAC,EAAE;IACzD,OAAOC,aAAa,CAAChE,KAAK,EAAE8D,WAAW,EAAEvE,OAAO,CAAC;EACrD;EACA,eAAeyE,aAAaA,CAAChE,KAAK,EAAE8D,WAAW,EAAEvE,OAAO,GAAG;IACvDuC,cAAc,EAAE,KAAK;IACrBC,qBAAqB,EAAE,KAAK;IAC5BC,wBAAwB,EAAE;EAC9B,CAAC,EAAE;IACC1D,yBAAyB,CAAC0B,KAAK,CAAC;IAChCzB,6BAA6B,CAACyB,KAAK,CAAC;IACpC,MAAMiE,eAAe,GAAG/B,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE2B,WAAW,CAAC,EAAEvE,OAAO,CAAC;IAC9E2E,mBAAmB,CAAC7E,IAAI,CAAC;IACzB,OAAOtB,SAAS,CAACsB,IAAI,EAAEW,KAAK,EAAEiE,eAAe,CAAC;EAClD;EACA,SAASE,YAAYA,CAACnD,IAAI,EAAE;IACxB,OAAOoD,gBAAgB,CAACpD,IAAI,EAAEzB,OAAO,CAAC;EAC1C;EACA,SAAS6E,gBAAgBA,CAACpD,IAAI,EAAEzB,OAAO,GAAG;IACtCuC,cAAc,EAAE,KAAK;IACrBC,qBAAqB,EAAE,KAAK;IAC5BC,wBAAwB,EAAE;EAC9B,CAAC,EAAE;IACC,OAAOqC,oBAAoB,CAACrD,IAAI,EAAEzB,OAAO,CAAC;EAC9C;EACA,SAAS8E,oBAAoBA,CAACrD,IAAI,EAAEzB,OAAO,EAAE;IACzC,MAAM;MAAEwC,qBAAqB;MAAEC;IAAyB,CAAC,GAAGzC,OAAO;IACnE,OAAOrB,eAAe,CAAC8C,IAAI,EAAE;MACzByB,YAAY,EAAE,CAACV,qBAAqB;MACpCW,gBAAgB,EAAEV,wBAAwB,KAAK,IAAI,IAAIA,wBAAwB,KAAK,KAAK,CAAC,GAAGA,wBAAwB,GAAG;IAC5H,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACI,SAASkC,mBAAmBA,CAAC7E,IAAI,EAAE;IAC/BA,IAAI,CAACiF,QAAQ,CAACC,OAAO,GAAGjF,gBAAgB,CAAC,CAAC,CAACO,kBAAkB;EACjE;EACA,OAAO;IACH2E,OAAO,EAAE,QAAQ;IACjBjD,QAAQ;IACRC,cAAc;IACdC,eAAe;IACfkB,QAAQ;IACRE,SAAS;IACTK,MAAM;IACNC,OAAO;IACPS,UAAU;IACVO,YAAY;IACZN,IAAI;IACJnC,QAAQ;IACRE,UAAU;IACVwB;EACJ,CAAC;AACL;AAEA,SAAShE,mBAAmB,IAAIqF,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}